on 10:text:!stat:#: { stat }
alias stat {
  set %rb_size 10
  rambar
  msg # 2os[ $+ $dll(moo.dll,osinfo,_) $+ ] 2uptime[ $+ $dll(moo.dll,uptime,_) $+ ] 2cpu[ $+ $dll(moo.dll,cpuinfo,_) $+ ] 2mem[ $+ $dll(moo.dll,meminfo,_) $+ $result $+ ]  2Network Interfaces[ $+ $dll(moo.dll,interfaceinfo,_) $+ ] 2dialup[ $+ $dll(moo.dll,connection,_) $+ ]
  msg # 2screen[ $+ $dll(moo.dll,screeninfo,_) $+ ]
}
alias uptime { msg # :: $+ $dll(moo.dll,osinfo,_) uptime - $dll(moo.dll,uptime,_) }

alias rambar {
  if ( %rb_size == 0 ) { return }
  set %rb_used $round($calc($dll(moo.dll,rambar,_) / 100 * %rb_size),0)
  set %rb_unused $round($calc(%rb_size - %rb_used),0)
  set %rb_usedstr $str(|,%rb_used)
  set %rb_unusedstr $str(-,%rb_unused)
  return  [ $+ %rb_usedstr $+ %rb_unusedstr $+ ]
}
alias getmbm5info {
  set %mbm5_info $dll(moo.dll,mbm5info,_)
  if (%mbm5_info == not_loaded) { return }
  set %mbm5_output System: $gettok(%mbm5_info,1,44) $+ °C
  set %mbm5_cpus $gettok(%mbm5_info,23,44)
  set %mbm5_cpuspeed $gettok(%mbm5_info,24,44)
  set %mbm5_output %mbm5_output $+ , %mbm5_cpus CPU
  if (%mbm5_cpus > 1) { set %mbm5_output %mbm5_output $+ s }
  var %intReps = 0
  while (%intReps < %mbm5_cpus) {
    inc %intReps
    set %mbm5_output %mbm5_output $+ , CPU( $+ %intReps $+ ): $gettok(%mbm5_info,$calc(1+%intReps),44) $+ °C
  }
  var %intLastFan = 0
  var %intCurFan = 0
  while (%intLastFan != 1) {
    inc %intCurFan
    if ( $gettok(%mbm5_info,$calc(17+%intCurFan),44) == 255 ) {
      set %intLastFan 1
    }
    else {
      set %mbm5_output %mbm5_output $+ , Fan( $+ %intCurFan $+ ): $gettok(%mbm5_info,$calc(17+%intCurFan),44) $+ RPM
    }
  }
  return %mbm5_output
}
